;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit pipelining_top : 
  module pC : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : SInt<32>, out : SInt<32>, pc4 : SInt<32>}
    
    reg pc : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[PC.scala 12:21]
    pc <= io.in @[PC.scala 13:8]
    io.out <= pc @[PC.scala 14:12]
    node _io_pc4_T = add(pc, asSInt(UInt<4>("h04"))) @[PC.scala 15:18]
    node _io_pc4_T_1 = tail(_io_pc4_T, 1) @[PC.scala 15:18]
    node _io_pc4_T_2 = asSInt(_io_pc4_T_1) @[PC.scala 15:18]
    io.pc4 <= _io_pc4_T_2 @[PC.scala 15:12]
    
  module instrMem : 
    input clock : Clock
    input reset : Reset
    output io : {instr : UInt<32>, flip addr : UInt<32>}
    
    cmem mem : UInt<32>[1024] @[InstrMem.scala 12:18]
    node _io_instr_T = bits(io.addr, 9, 0) @[InstrMem.scala 14:25]
    read mport io_instr_MPORT = mem[_io_instr_T], clock @[InstrMem.scala 14:25]
    io.instr <= io_instr_MPORT @[InstrMem.scala 14:14]
    
  module frwdUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip exMem_reg_write : UInt<1>, flip memWb_reg_write : UInt<1>, flip mem_wb_rdAddr : UInt<5>, flip ex_mem_rdAddr : UInt<5>, flip id_ex_rs1Addr : UInt<5>, flip id_ex_rs2Addr : UInt<5>, frwdA : UInt<2>, frwdB : UInt<2>}
    
    io.frwdA <= UInt<1>("h00") @[ForwardingUnit.scala 17:14]
    io.frwdB <= UInt<1>("h00") @[ForwardingUnit.scala 18:14]
    node _T = eq(io.exMem_reg_write, UInt<1>("h01")) @[ForwardingUnit.scala 21:29]
    node _T_1 = neq(io.ex_mem_rdAddr, UInt<1>("h00")) @[ForwardingUnit.scala 21:60]
    node _T_2 = and(_T, _T_1) @[ForwardingUnit.scala 21:40]
    node _T_3 = eq(io.ex_mem_rdAddr, io.id_ex_rs1Addr) @[ForwardingUnit.scala 21:96]
    node _T_4 = and(_T_2, _T_3) @[ForwardingUnit.scala 21:75]
    node _T_5 = eq(io.ex_mem_rdAddr, io.id_ex_rs2Addr) @[ForwardingUnit.scala 21:139]
    node _T_6 = and(_T_4, _T_5) @[ForwardingUnit.scala 21:118]
    when _T_6 : @[ForwardingUnit.scala 21:161]
      io.frwdA <= UInt<1>("h01") @[ForwardingUnit.scala 22:18]
      io.frwdB <= UInt<1>("h01") @[ForwardingUnit.scala 23:26]
      skip @[ForwardingUnit.scala 21:161]
    else : @[ForwardingUnit.scala 24:124]
      node _T_7 = eq(io.exMem_reg_write, UInt<1>("h01")) @[ForwardingUnit.scala 24:35]
      node _T_8 = neq(io.ex_mem_rdAddr, UInt<1>("h00")) @[ForwardingUnit.scala 24:66]
      node _T_9 = and(_T_7, _T_8) @[ForwardingUnit.scala 24:46]
      node _T_10 = eq(io.ex_mem_rdAddr, io.id_ex_rs2Addr) @[ForwardingUnit.scala 24:102]
      node _T_11 = and(_T_9, _T_10) @[ForwardingUnit.scala 24:81]
      when _T_11 : @[ForwardingUnit.scala 24:124]
        io.frwdB <= UInt<1>("h01") @[ForwardingUnit.scala 25:26]
        skip @[ForwardingUnit.scala 24:124]
      else : @[ForwardingUnit.scala 26:124]
        node _T_12 = eq(io.exMem_reg_write, UInt<1>("h01")) @[ForwardingUnit.scala 26:35]
        node _T_13 = neq(io.ex_mem_rdAddr, UInt<1>("h00")) @[ForwardingUnit.scala 26:66]
        node _T_14 = and(_T_12, _T_13) @[ForwardingUnit.scala 26:46]
        node _T_15 = eq(io.ex_mem_rdAddr, io.id_ex_rs1Addr) @[ForwardingUnit.scala 26:102]
        node _T_16 = and(_T_14, _T_15) @[ForwardingUnit.scala 26:81]
        when _T_16 : @[ForwardingUnit.scala 26:124]
          io.frwdA <= UInt<1>("h01") @[ForwardingUnit.scala 27:26]
          skip @[ForwardingUnit.scala 26:124]
    node _T_17 = eq(io.memWb_reg_write, UInt<1>("h01")) @[ForwardingUnit.scala 31:29]
    node _T_18 = neq(io.mem_wb_rdAddr, UInt<1>("h00")) @[ForwardingUnit.scala 31:60]
    node _T_19 = and(_T_17, _T_18) @[ForwardingUnit.scala 31:40]
    node _T_20 = eq(io.exMem_reg_write, UInt<1>("h01")) @[ForwardingUnit.scala 31:100]
    node _T_21 = neq(io.ex_mem_rdAddr, UInt<1>("h00")) @[ForwardingUnit.scala 31:133]
    node _T_22 = and(_T_20, _T_21) @[ForwardingUnit.scala 31:112]
    node _T_23 = eq(io.ex_mem_rdAddr, io.id_ex_rs1Addr) @[ForwardingUnit.scala 31:170]
    node _T_24 = and(_T_22, _T_23) @[ForwardingUnit.scala 31:149]
    node _T_25 = eq(io.ex_mem_rdAddr, io.id_ex_rs2Addr) @[ForwardingUnit.scala 31:213]
    node _T_26 = and(_T_24, _T_25) @[ForwardingUnit.scala 31:192]
    node _T_27 = not(_T_26) @[ForwardingUnit.scala 31:78]
    node _T_28 = and(_T_19, _T_27) @[ForwardingUnit.scala 31:75]
    node _T_29 = eq(io.mem_wb_rdAddr, io.id_ex_rs1Addr) @[ForwardingUnit.scala 31:257]
    node _T_30 = and(_T_28, _T_29) @[ForwardingUnit.scala 31:236]
    node _T_31 = eq(io.mem_wb_rdAddr, io.id_ex_rs2Addr) @[ForwardingUnit.scala 31:300]
    node _T_32 = and(_T_30, _T_31) @[ForwardingUnit.scala 31:279]
    when _T_32 : @[ForwardingUnit.scala 31:322]
      io.frwdA <= UInt<2>("h02") @[ForwardingUnit.scala 32:18]
      io.frwdB <= UInt<2>("h02") @[ForwardingUnit.scala 33:18]
      skip @[ForwardingUnit.scala 31:322]
    else : @[ForwardingUnit.scala 34:242]
      node _T_33 = eq(io.memWb_reg_write, UInt<1>("h01")) @[ForwardingUnit.scala 34:35]
      node _T_34 = neq(io.mem_wb_rdAddr, UInt<1>("h00")) @[ForwardingUnit.scala 34:66]
      node _T_35 = and(_T_33, _T_34) @[ForwardingUnit.scala 34:46]
      node _T_36 = eq(io.exMem_reg_write, UInt<1>("h01")) @[ForwardingUnit.scala 34:106]
      node _T_37 = neq(io.ex_mem_rdAddr, UInt<1>("h00")) @[ForwardingUnit.scala 34:139]
      node _T_38 = and(_T_36, _T_37) @[ForwardingUnit.scala 34:118]
      node _T_39 = eq(io.ex_mem_rdAddr, io.id_ex_rs2Addr) @[ForwardingUnit.scala 34:176]
      node _T_40 = and(_T_38, _T_39) @[ForwardingUnit.scala 34:155]
      node _T_41 = not(_T_40) @[ForwardingUnit.scala 34:84]
      node _T_42 = and(_T_35, _T_41) @[ForwardingUnit.scala 34:81]
      node _T_43 = eq(io.mem_wb_rdAddr, io.id_ex_rs2Addr) @[ForwardingUnit.scala 34:220]
      node _T_44 = and(_T_42, _T_43) @[ForwardingUnit.scala 34:199]
      when _T_44 : @[ForwardingUnit.scala 34:242]
        io.frwdB <= UInt<2>("h02") @[ForwardingUnit.scala 35:22]
        skip @[ForwardingUnit.scala 34:242]
      else : @[ForwardingUnit.scala 36:243]
        node _T_45 = eq(io.memWb_reg_write, UInt<1>("h01")) @[ForwardingUnit.scala 36:35]
        node _T_46 = neq(io.mem_wb_rdAddr, UInt<1>("h00")) @[ForwardingUnit.scala 36:66]
        node _T_47 = and(_T_45, _T_46) @[ForwardingUnit.scala 36:46]
        node _T_48 = eq(io.exMem_reg_write, UInt<1>("h01")) @[ForwardingUnit.scala 36:106]
        node _T_49 = neq(io.ex_mem_rdAddr, UInt<1>("h00")) @[ForwardingUnit.scala 36:139]
        node _T_50 = and(_T_48, _T_49) @[ForwardingUnit.scala 36:118]
        node _T_51 = eq(io.ex_mem_rdAddr, io.id_ex_rs2Addr) @[ForwardingUnit.scala 36:176]
        node _T_52 = and(_T_50, _T_51) @[ForwardingUnit.scala 36:155]
        node _T_53 = not(_T_52) @[ForwardingUnit.scala 36:84]
        node _T_54 = and(_T_47, _T_53) @[ForwardingUnit.scala 36:81]
        node _T_55 = eq(io.mem_wb_rdAddr, io.id_ex_rs1Addr) @[ForwardingUnit.scala 36:221]
        node _T_56 = and(_T_54, _T_55) @[ForwardingUnit.scala 36:200]
        when _T_56 : @[ForwardingUnit.scala 36:243]
          io.frwdA <= UInt<2>("h02") @[ForwardingUnit.scala 37:18]
          skip @[ForwardingUnit.scala 36:243]
    
  module decode_frwd : 
    input clock : Clock
    input reset : Reset
    output io : {flip id_ex_rdAddr : UInt<5>, flip id_ex_memRead : UInt<1>, flip ex_mem_rdAddr : UInt<5>, flip ex_mem_memRead : UInt<1>, flip mem_wr_rdAddr : UInt<5>, flip mem_wr_memRead : UInt<1>, flip rs1Addr : UInt<5>, flip rs2Addr : UInt<5>, flip c_branch : UInt<1>, frwd_A : UInt<4>, frwd_B : UInt<4>}
    
    io.frwd_A <= UInt<1>("h00") @[BranchForward.scala 20:15]
    io.frwd_B <= UInt<1>("h00") @[BranchForward.scala 21:15]
    node _T = eq(io.c_branch, UInt<1>("h01")) @[BranchForward.scala 22:22]
    when _T : @[BranchForward.scala 22:30]
      node _T_1 = neq(io.id_ex_rdAddr, UInt<1>("h00")) @[BranchForward.scala 24:30]
      node _T_2 = neq(io.id_ex_memRead, UInt<1>("h01")) @[BranchForward.scala 24:65]
      node _T_3 = and(_T_1, _T_2) @[BranchForward.scala 24:45]
      node _T_4 = eq(io.id_ex_rdAddr, io.rs1Addr) @[BranchForward.scala 24:93]
      node _T_5 = and(_T_3, _T_4) @[BranchForward.scala 24:73]
      node _T_6 = eq(io.id_ex_rdAddr, io.rs2Addr) @[BranchForward.scala 24:129]
      node _T_7 = and(_T_5, _T_6) @[BranchForward.scala 24:109]
      when _T_7 : @[BranchForward.scala 24:146]
        io.frwd_A <= UInt<1>("h01") @[BranchForward.scala 25:23]
        io.frwd_B <= UInt<1>("h01") @[BranchForward.scala 26:23]
        skip @[BranchForward.scala 24:146]
      else : @[BranchForward.scala 27:116]
        node _T_8 = neq(io.id_ex_rdAddr, UInt<1>("h00")) @[BranchForward.scala 27:36]
        node _T_9 = neq(io.id_ex_memRead, UInt<1>("h01")) @[BranchForward.scala 27:71]
        node _T_10 = and(_T_8, _T_9) @[BranchForward.scala 27:51]
        node _T_11 = eq(io.id_ex_rdAddr, io.rs1Addr) @[BranchForward.scala 27:99]
        node _T_12 = and(_T_10, _T_11) @[BranchForward.scala 27:79]
        when _T_12 : @[BranchForward.scala 27:116]
          io.frwd_A <= UInt<1>("h01") @[BranchForward.scala 28:23]
          skip @[BranchForward.scala 27:116]
        else : @[BranchForward.scala 29:116]
          node _T_13 = neq(io.id_ex_rdAddr, UInt<1>("h00")) @[BranchForward.scala 29:36]
          node _T_14 = neq(io.id_ex_memRead, UInt<1>("h01")) @[BranchForward.scala 29:71]
          node _T_15 = and(_T_13, _T_14) @[BranchForward.scala 29:51]
          node _T_16 = eq(io.id_ex_rdAddr, io.rs2Addr) @[BranchForward.scala 29:99]
          node _T_17 = and(_T_15, _T_16) @[BranchForward.scala 29:79]
          when _T_17 : @[BranchForward.scala 29:116]
            io.frwd_B <= UInt<1>("h01") @[BranchForward.scala 30:23]
            skip @[BranchForward.scala 29:116]
      node _T_18 = neq(io.ex_mem_rdAddr, UInt<1>("h00")) @[BranchForward.scala 34:31]
      node _T_19 = neq(io.ex_mem_memRead, UInt<1>("h01")) @[BranchForward.scala 34:67]
      node _T_20 = and(_T_18, _T_19) @[BranchForward.scala 34:46]
      node _T_21 = neq(io.id_ex_rdAddr, UInt<1>("h00")) @[BranchForward.scala 35:28]
      node _T_22 = eq(io.id_ex_rdAddr, io.rs1Addr) @[BranchForward.scala 35:64]
      node _T_23 = and(_T_21, _T_22) @[BranchForward.scala 35:44]
      node _T_24 = eq(io.id_ex_rdAddr, io.rs2Addr) @[BranchForward.scala 35:100]
      node _T_25 = and(_T_23, _T_24) @[BranchForward.scala 35:80]
      node _T_26 = not(_T_25) @[BranchForward.scala 35:9]
      node _T_27 = and(_T_20, _T_26) @[BranchForward.scala 34:75]
      node _T_28 = eq(io.ex_mem_rdAddr, io.rs1Addr) @[BranchForward.scala 36:27]
      node _T_29 = and(_T_27, _T_28) @[BranchForward.scala 35:117]
      node _T_30 = eq(io.ex_mem_rdAddr, io.rs2Addr) @[BranchForward.scala 36:64]
      node _T_31 = and(_T_29, _T_30) @[BranchForward.scala 36:43]
      when _T_31 : @[BranchForward.scala 36:80]
        io.frwd_A <= UInt<2>("h02") @[BranchForward.scala 37:23]
        io.frwd_B <= UInt<2>("h02") @[BranchForward.scala 38:23]
        skip @[BranchForward.scala 36:80]
      else : @[BranchForward.scala 41:43]
        node _T_32 = neq(io.ex_mem_rdAddr, UInt<1>("h00")) @[BranchForward.scala 39:37]
        node _T_33 = neq(io.ex_mem_memRead, UInt<1>("h01")) @[BranchForward.scala 39:73]
        node _T_34 = and(_T_32, _T_33) @[BranchForward.scala 39:52]
        node _T_35 = neq(io.id_ex_rdAddr, UInt<1>("h00")) @[BranchForward.scala 40:28]
        node _T_36 = eq(io.id_ex_rdAddr, io.rs2Addr) @[BranchForward.scala 40:64]
        node _T_37 = and(_T_35, _T_36) @[BranchForward.scala 40:44]
        node _T_38 = not(_T_37) @[BranchForward.scala 40:9]
        node _T_39 = and(_T_34, _T_38) @[BranchForward.scala 39:81]
        node _T_40 = eq(io.ex_mem_rdAddr, io.rs2Addr) @[BranchForward.scala 41:27]
        node _T_41 = and(_T_39, _T_40) @[BranchForward.scala 40:81]
        when _T_41 : @[BranchForward.scala 41:43]
          io.frwd_B <= UInt<2>("h02") @[BranchForward.scala 42:23]
          skip @[BranchForward.scala 41:43]
        else : @[BranchForward.scala 45:43]
          node _T_42 = neq(io.ex_mem_rdAddr, UInt<1>("h00")) @[BranchForward.scala 43:37]
          node _T_43 = neq(io.ex_mem_memRead, UInt<1>("h01")) @[BranchForward.scala 43:73]
          node _T_44 = and(_T_42, _T_43) @[BranchForward.scala 43:52]
          node _T_45 = neq(io.id_ex_rdAddr, UInt<1>("h00")) @[BranchForward.scala 44:28]
          node _T_46 = eq(io.id_ex_rdAddr, io.rs1Addr) @[BranchForward.scala 44:64]
          node _T_47 = and(_T_45, _T_46) @[BranchForward.scala 44:44]
          node _T_48 = not(_T_47) @[BranchForward.scala 44:9]
          node _T_49 = and(_T_44, _T_48) @[BranchForward.scala 43:81]
          node _T_50 = eq(io.ex_mem_rdAddr, io.rs1Addr) @[BranchForward.scala 45:27]
          node _T_51 = and(_T_49, _T_50) @[BranchForward.scala 44:81]
          when _T_51 : @[BranchForward.scala 45:43]
            io.frwd_A <= UInt<2>("h02") @[BranchForward.scala 46:23]
            skip @[BranchForward.scala 45:43]
          else : @[BranchForward.scala 49:81]
            node _T_52 = neq(io.ex_mem_rdAddr, UInt<1>("h00")) @[BranchForward.scala 47:37]
            node _T_53 = eq(io.ex_mem_memRead, UInt<1>("h01")) @[BranchForward.scala 47:73]
            node _T_54 = and(_T_52, _T_53) @[BranchForward.scala 47:52]
            node _T_55 = neq(io.id_ex_rdAddr, UInt<1>("h00")) @[BranchForward.scala 48:28]
            node _T_56 = eq(io.id_ex_rdAddr, io.rs1Addr) @[BranchForward.scala 48:64]
            node _T_57 = and(_T_55, _T_56) @[BranchForward.scala 48:44]
            node _T_58 = eq(io.id_ex_rdAddr, io.rs2Addr) @[BranchForward.scala 48:100]
            node _T_59 = and(_T_57, _T_58) @[BranchForward.scala 48:80]
            node _T_60 = not(_T_59) @[BranchForward.scala 48:9]
            node _T_61 = and(_T_54, _T_60) @[BranchForward.scala 47:81]
            node _T_62 = eq(io.ex_mem_rdAddr, io.rs1Addr) @[BranchForward.scala 49:27]
            node _T_63 = and(_T_61, _T_62) @[BranchForward.scala 48:117]
            node _T_64 = eq(io.ex_mem_rdAddr, io.rs2Addr) @[BranchForward.scala 49:64]
            node _T_65 = and(_T_63, _T_64) @[BranchForward.scala 49:43]
            when _T_65 : @[BranchForward.scala 49:81]
              io.frwd_A <= UInt<3>("h04") @[BranchForward.scala 51:23]
              io.frwd_B <= UInt<3>("h04") @[BranchForward.scala 52:23]
              skip @[BranchForward.scala 49:81]
            else : @[BranchForward.scala 56:43]
              node _T_66 = neq(io.ex_mem_rdAddr, UInt<1>("h00")) @[BranchForward.scala 54:37]
              node _T_67 = eq(io.ex_mem_memRead, UInt<1>("h01")) @[BranchForward.scala 54:73]
              node _T_68 = and(_T_66, _T_67) @[BranchForward.scala 54:52]
              node _T_69 = neq(io.id_ex_rdAddr, UInt<1>("h00")) @[BranchForward.scala 55:28]
              node _T_70 = eq(io.id_ex_rdAddr, io.rs2Addr) @[BranchForward.scala 55:64]
              node _T_71 = and(_T_69, _T_70) @[BranchForward.scala 55:44]
              node _T_72 = not(_T_71) @[BranchForward.scala 55:9]
              node _T_73 = and(_T_68, _T_72) @[BranchForward.scala 54:81]
              node _T_74 = eq(io.ex_mem_rdAddr, io.rs2Addr) @[BranchForward.scala 56:27]
              node _T_75 = and(_T_73, _T_74) @[BranchForward.scala 55:81]
              when _T_75 : @[BranchForward.scala 56:43]
                io.frwd_B <= UInt<3>("h04") @[BranchForward.scala 57:23]
                skip @[BranchForward.scala 56:43]
              else : @[BranchForward.scala 60:43]
                node _T_76 = eq(io.c_branch, UInt<1>("h01")) @[BranchForward.scala 58:32]
                node _T_77 = neq(io.ex_mem_rdAddr, UInt<1>("h00")) @[BranchForward.scala 58:60]
                node _T_78 = and(_T_76, _T_77) @[BranchForward.scala 58:40]
                node _T_79 = eq(io.ex_mem_memRead, UInt<1>("h01")) @[BranchForward.scala 58:96]
                node _T_80 = and(_T_78, _T_79) @[BranchForward.scala 58:75]
                node _T_81 = neq(io.id_ex_rdAddr, UInt<1>("h00")) @[BranchForward.scala 59:28]
                node _T_82 = eq(io.id_ex_rdAddr, io.rs1Addr) @[BranchForward.scala 59:64]
                node _T_83 = and(_T_81, _T_82) @[BranchForward.scala 59:44]
                node _T_84 = not(_T_83) @[BranchForward.scala 59:9]
                node _T_85 = and(_T_80, _T_84) @[BranchForward.scala 58:104]
                node _T_86 = eq(io.ex_mem_rdAddr, io.rs1Addr) @[BranchForward.scala 60:27]
                node _T_87 = and(_T_85, _T_86) @[BranchForward.scala 59:81]
                when _T_87 : @[BranchForward.scala 60:43]
                  io.frwd_A <= UInt<3>("h04") @[BranchForward.scala 61:23]
                  skip @[BranchForward.scala 60:43]
      node _T_88 = neq(io.mem_wr_rdAddr, UInt<1>("h00")) @[BranchForward.scala 65:31]
      node _T_89 = neq(io.mem_wr_memRead, UInt<1>("h01")) @[BranchForward.scala 65:67]
      node _T_90 = and(_T_88, _T_89) @[BranchForward.scala 65:46]
      node _T_91 = neq(io.id_ex_rdAddr, UInt<1>("h00")) @[BranchForward.scala 67:28]
      node _T_92 = eq(io.id_ex_rdAddr, io.rs1Addr) @[BranchForward.scala 67:64]
      node _T_93 = and(_T_91, _T_92) @[BranchForward.scala 67:44]
      node _T_94 = eq(io.id_ex_rdAddr, io.rs2Addr) @[BranchForward.scala 67:100]
      node _T_95 = and(_T_93, _T_94) @[BranchForward.scala 67:80]
      node _T_96 = not(_T_95) @[BranchForward.scala 67:9]
      node _T_97 = and(_T_90, _T_96) @[BranchForward.scala 65:75]
      node _T_98 = neq(io.ex_mem_rdAddr, UInt<1>("h00")) @[BranchForward.scala 69:29]
      node _T_99 = eq(io.ex_mem_rdAddr, io.rs1Addr) @[BranchForward.scala 69:66]
      node _T_100 = and(_T_98, _T_99) @[BranchForward.scala 69:45]
      node _T_101 = eq(io.ex_mem_rdAddr, io.rs2Addr) @[BranchForward.scala 69:103]
      node _T_102 = and(_T_100, _T_101) @[BranchForward.scala 69:82]
      node _T_103 = not(_T_102) @[BranchForward.scala 69:9]
      node _T_104 = and(_T_97, _T_103) @[BranchForward.scala 67:117]
      node _T_105 = eq(io.mem_wr_rdAddr, io.rs1Addr) @[BranchForward.scala 70:27]
      node _T_106 = and(_T_104, _T_105) @[BranchForward.scala 69:120]
      node _T_107 = eq(io.mem_wr_rdAddr, io.rs2Addr) @[BranchForward.scala 70:64]
      node _T_108 = and(_T_106, _T_107) @[BranchForward.scala 70:43]
      when _T_108 : @[BranchForward.scala 70:81]
        io.frwd_A <= UInt<2>("h03") @[BranchForward.scala 71:23]
        io.frwd_B <= UInt<2>("h03") @[BranchForward.scala 72:23]
        skip @[BranchForward.scala 70:81]
      else : @[BranchForward.scala 78:44]
        node _T_109 = neq(io.mem_wr_rdAddr, UInt<1>("h00")) @[BranchForward.scala 73:37]
        node _T_110 = neq(io.mem_wr_memRead, UInt<1>("h01")) @[BranchForward.scala 73:73]
        node _T_111 = and(_T_109, _T_110) @[BranchForward.scala 73:52]
        node _T_112 = neq(io.id_ex_rdAddr, UInt<1>("h00")) @[BranchForward.scala 75:28]
        node _T_113 = eq(io.id_ex_rdAddr, io.rs2Addr) @[BranchForward.scala 75:64]
        node _T_114 = and(_T_112, _T_113) @[BranchForward.scala 75:44]
        node _T_115 = not(_T_114) @[BranchForward.scala 75:9]
        node _T_116 = and(_T_111, _T_115) @[BranchForward.scala 73:81]
        node _T_117 = neq(io.ex_mem_rdAddr, UInt<1>("h00")) @[BranchForward.scala 77:29]
        node _T_118 = eq(io.ex_mem_rdAddr, io.rs2Addr) @[BranchForward.scala 77:66]
        node _T_119 = and(_T_117, _T_118) @[BranchForward.scala 77:45]
        node _T_120 = not(_T_119) @[BranchForward.scala 77:9]
        node _T_121 = and(_T_116, _T_120) @[BranchForward.scala 75:81]
        node _T_122 = eq(io.mem_wr_rdAddr, io.rs2Addr) @[BranchForward.scala 78:27]
        node _T_123 = and(_T_121, _T_122) @[BranchForward.scala 77:83]
        when _T_123 : @[BranchForward.scala 78:44]
          io.frwd_B <= UInt<2>("h03") @[BranchForward.scala 79:23]
          skip @[BranchForward.scala 78:44]
        else : @[BranchForward.scala 85:44]
          node _T_124 = neq(io.mem_wr_rdAddr, UInt<1>("h00")) @[BranchForward.scala 80:37]
          node _T_125 = neq(io.mem_wr_memRead, UInt<1>("h01")) @[BranchForward.scala 80:73]
          node _T_126 = and(_T_124, _T_125) @[BranchForward.scala 80:52]
          node _T_127 = neq(io.id_ex_rdAddr, UInt<1>("h00")) @[BranchForward.scala 82:28]
          node _T_128 = eq(io.id_ex_rdAddr, io.rs1Addr) @[BranchForward.scala 82:64]
          node _T_129 = and(_T_127, _T_128) @[BranchForward.scala 82:44]
          node _T_130 = not(_T_129) @[BranchForward.scala 82:9]
          node _T_131 = and(_T_126, _T_130) @[BranchForward.scala 80:81]
          node _T_132 = neq(io.ex_mem_rdAddr, UInt<1>("h00")) @[BranchForward.scala 84:29]
          node _T_133 = eq(io.ex_mem_rdAddr, io.rs1Addr) @[BranchForward.scala 84:66]
          node _T_134 = and(_T_132, _T_133) @[BranchForward.scala 84:45]
          node _T_135 = not(_T_134) @[BranchForward.scala 84:9]
          node _T_136 = and(_T_131, _T_135) @[BranchForward.scala 82:81]
          node _T_137 = eq(io.mem_wr_rdAddr, io.rs1Addr) @[BranchForward.scala 85:27]
          node _T_138 = and(_T_136, _T_137) @[BranchForward.scala 84:83]
          when _T_138 : @[BranchForward.scala 85:44]
            io.frwd_A <= UInt<2>("h03") @[BranchForward.scala 86:23]
            skip @[BranchForward.scala 85:44]
          else : @[BranchForward.scala 92:80]
            node _T_139 = neq(io.mem_wr_rdAddr, UInt<1>("h00")) @[BranchForward.scala 87:37]
            node _T_140 = eq(io.mem_wr_memRead, UInt<1>("h01")) @[BranchForward.scala 87:73]
            node _T_141 = and(_T_139, _T_140) @[BranchForward.scala 87:52]
            node _T_142 = neq(io.id_ex_rdAddr, UInt<1>("h00")) @[BranchForward.scala 89:28]
            node _T_143 = eq(io.id_ex_rdAddr, io.rs1Addr) @[BranchForward.scala 89:64]
            node _T_144 = and(_T_142, _T_143) @[BranchForward.scala 89:44]
            node _T_145 = eq(io.id_ex_rdAddr, io.rs2Addr) @[BranchForward.scala 89:100]
            node _T_146 = and(_T_144, _T_145) @[BranchForward.scala 89:80]
            node _T_147 = not(_T_146) @[BranchForward.scala 89:9]
            node _T_148 = and(_T_141, _T_147) @[BranchForward.scala 87:81]
            node _T_149 = neq(io.ex_mem_rdAddr, UInt<1>("h00")) @[BranchForward.scala 91:29]
            node _T_150 = eq(io.ex_mem_rdAddr, io.rs1Addr) @[BranchForward.scala 91:66]
            node _T_151 = and(_T_149, _T_150) @[BranchForward.scala 91:45]
            node _T_152 = eq(io.ex_mem_rdAddr, io.rs2Addr) @[BranchForward.scala 91:103]
            node _T_153 = and(_T_151, _T_152) @[BranchForward.scala 91:82]
            node _T_154 = not(_T_153) @[BranchForward.scala 91:9]
            node _T_155 = and(_T_148, _T_154) @[BranchForward.scala 89:117]
            node _T_156 = eq(io.mem_wr_rdAddr, io.rs1Addr) @[BranchForward.scala 92:27]
            node _T_157 = and(_T_155, _T_156) @[BranchForward.scala 91:120]
            node _T_158 = eq(io.mem_wr_rdAddr, io.rs2Addr) @[BranchForward.scala 92:64]
            node _T_159 = and(_T_157, _T_158) @[BranchForward.scala 92:43]
            when _T_159 : @[BranchForward.scala 92:80]
              io.frwd_A <= UInt<3>("h05") @[BranchForward.scala 94:23]
              io.frwd_B <= UInt<3>("h05") @[BranchForward.scala 95:23]
              skip @[BranchForward.scala 92:80]
            else : @[BranchForward.scala 101:44]
              node _T_160 = neq(io.mem_wr_rdAddr, UInt<1>("h00")) @[BranchForward.scala 96:37]
              node _T_161 = eq(io.mem_wr_memRead, UInt<1>("h01")) @[BranchForward.scala 96:73]
              node _T_162 = and(_T_160, _T_161) @[BranchForward.scala 96:52]
              node _T_163 = neq(io.id_ex_rdAddr, UInt<1>("h00")) @[BranchForward.scala 98:28]
              node _T_164 = eq(io.id_ex_rdAddr, io.rs2Addr) @[BranchForward.scala 98:64]
              node _T_165 = and(_T_163, _T_164) @[BranchForward.scala 98:44]
              node _T_166 = not(_T_165) @[BranchForward.scala 98:9]
              node _T_167 = and(_T_162, _T_166) @[BranchForward.scala 96:81]
              node _T_168 = neq(io.ex_mem_rdAddr, UInt<1>("h00")) @[BranchForward.scala 100:29]
              node _T_169 = eq(io.ex_mem_rdAddr, io.rs2Addr) @[BranchForward.scala 100:66]
              node _T_170 = and(_T_168, _T_169) @[BranchForward.scala 100:45]
              node _T_171 = not(_T_170) @[BranchForward.scala 100:9]
              node _T_172 = and(_T_167, _T_171) @[BranchForward.scala 98:81]
              node _T_173 = eq(io.mem_wr_rdAddr, io.rs2Addr) @[BranchForward.scala 101:27]
              node _T_174 = and(_T_172, _T_173) @[BranchForward.scala 100:83]
              when _T_174 : @[BranchForward.scala 101:44]
                io.frwd_B <= UInt<3>("h05") @[BranchForward.scala 102:23]
                skip @[BranchForward.scala 101:44]
              else : @[BranchForward.scala 108:44]
                node _T_175 = neq(io.mem_wr_rdAddr, UInt<1>("h00")) @[BranchForward.scala 103:37]
                node _T_176 = eq(io.mem_wr_memRead, UInt<1>("h01")) @[BranchForward.scala 103:73]
                node _T_177 = and(_T_175, _T_176) @[BranchForward.scala 103:52]
                node _T_178 = neq(io.id_ex_rdAddr, UInt<1>("h00")) @[BranchForward.scala 105:28]
                node _T_179 = eq(io.id_ex_rdAddr, io.rs1Addr) @[BranchForward.scala 105:64]
                node _T_180 = and(_T_178, _T_179) @[BranchForward.scala 105:44]
                node _T_181 = not(_T_180) @[BranchForward.scala 105:9]
                node _T_182 = and(_T_177, _T_181) @[BranchForward.scala 103:81]
                node _T_183 = neq(io.ex_mem_rdAddr, UInt<1>("h00")) @[BranchForward.scala 107:29]
                node _T_184 = eq(io.ex_mem_rdAddr, io.rs1Addr) @[BranchForward.scala 107:66]
                node _T_185 = and(_T_183, _T_184) @[BranchForward.scala 107:45]
                node _T_186 = not(_T_185) @[BranchForward.scala 107:9]
                node _T_187 = and(_T_182, _T_186) @[BranchForward.scala 105:81]
                node _T_188 = eq(io.mem_wr_rdAddr, io.rs1Addr) @[BranchForward.scala 108:27]
                node _T_189 = and(_T_187, _T_188) @[BranchForward.scala 107:82]
                when _T_189 : @[BranchForward.scala 108:44]
                  io.frwd_A <= UInt<3>("h05") @[BranchForward.scala 109:23]
                  skip @[BranchForward.scala 108:44]
      skip @[BranchForward.scala 22:30]
    else : @[BranchForward.scala 111:36]
      node _T_190 = eq(io.c_branch, UInt<1>("h00")) @[BranchForward.scala 111:28]
      when _T_190 : @[BranchForward.scala 111:36]
        node _T_191 = neq(io.id_ex_rdAddr, UInt<1>("h00")) @[BranchForward.scala 113:30]
        node _T_192 = neq(io.id_ex_memRead, UInt<1>("h01")) @[BranchForward.scala 113:65]
        node _T_193 = and(_T_191, _T_192) @[BranchForward.scala 113:45]
        node _T_194 = eq(io.id_ex_rdAddr, io.rs1Addr) @[BranchForward.scala 113:93]
        node _T_195 = and(_T_193, _T_194) @[BranchForward.scala 113:73]
        when _T_195 : @[BranchForward.scala 113:109]
          io.frwd_A <= UInt<3>("h06") @[BranchForward.scala 114:23]
          skip @[BranchForward.scala 113:109]
        node _T_196 = neq(io.ex_mem_rdAddr, UInt<1>("h00")) @[BranchForward.scala 117:31]
        node _T_197 = neq(io.ex_mem_memRead, UInt<1>("h01")) @[BranchForward.scala 117:67]
        node _T_198 = and(_T_196, _T_197) @[BranchForward.scala 117:46]
        node _T_199 = neq(io.id_ex_rdAddr, UInt<1>("h00")) @[BranchForward.scala 118:28]
        node _T_200 = eq(io.id_ex_rdAddr, io.rs1Addr) @[BranchForward.scala 118:64]
        node _T_201 = and(_T_199, _T_200) @[BranchForward.scala 118:44]
        node _T_202 = not(_T_201) @[BranchForward.scala 118:9]
        node _T_203 = and(_T_198, _T_202) @[BranchForward.scala 117:75]
        node _T_204 = eq(io.ex_mem_rdAddr, io.rs1Addr) @[BranchForward.scala 119:27]
        node _T_205 = and(_T_203, _T_204) @[BranchForward.scala 118:81]
        when _T_205 : @[BranchForward.scala 119:43]
          io.frwd_A <= UInt<3>("h07") @[BranchForward.scala 120:23]
          skip @[BranchForward.scala 119:43]
        else : @[BranchForward.scala 123:43]
          node _T_206 = neq(io.ex_mem_rdAddr, UInt<1>("h00")) @[BranchForward.scala 121:37]
          node _T_207 = eq(io.ex_mem_memRead, UInt<1>("h01")) @[BranchForward.scala 121:73]
          node _T_208 = and(_T_206, _T_207) @[BranchForward.scala 121:52]
          node _T_209 = neq(io.id_ex_rdAddr, UInt<1>("h00")) @[BranchForward.scala 122:28]
          node _T_210 = eq(io.id_ex_rdAddr, io.rs1Addr) @[BranchForward.scala 122:64]
          node _T_211 = and(_T_209, _T_210) @[BranchForward.scala 122:44]
          node _T_212 = not(_T_211) @[BranchForward.scala 122:9]
          node _T_213 = and(_T_208, _T_212) @[BranchForward.scala 121:81]
          node _T_214 = eq(io.ex_mem_rdAddr, io.rs1Addr) @[BranchForward.scala 123:27]
          node _T_215 = and(_T_213, _T_214) @[BranchForward.scala 122:81]
          when _T_215 : @[BranchForward.scala 123:43]
            io.frwd_A <= UInt<4>("h09") @[BranchForward.scala 125:23]
            skip @[BranchForward.scala 123:43]
        node _T_216 = neq(io.mem_wr_rdAddr, UInt<1>("h00")) @[BranchForward.scala 128:31]
        node _T_217 = neq(io.mem_wr_memRead, UInt<1>("h01")) @[BranchForward.scala 128:67]
        node _T_218 = and(_T_216, _T_217) @[BranchForward.scala 128:46]
        node _T_219 = neq(io.id_ex_rdAddr, UInt<1>("h00")) @[BranchForward.scala 130:28]
        node _T_220 = eq(io.id_ex_rdAddr, io.rs1Addr) @[BranchForward.scala 130:64]
        node _T_221 = and(_T_219, _T_220) @[BranchForward.scala 130:44]
        node _T_222 = not(_T_221) @[BranchForward.scala 130:9]
        node _T_223 = and(_T_218, _T_222) @[BranchForward.scala 128:75]
        node _T_224 = neq(io.ex_mem_rdAddr, UInt<1>("h00")) @[BranchForward.scala 132:29]
        node _T_225 = eq(io.ex_mem_rdAddr, io.rs1Addr) @[BranchForward.scala 132:66]
        node _T_226 = and(_T_224, _T_225) @[BranchForward.scala 132:45]
        node _T_227 = not(_T_226) @[BranchForward.scala 132:9]
        node _T_228 = and(_T_223, _T_227) @[BranchForward.scala 130:81]
        node _T_229 = eq(io.mem_wr_rdAddr, io.rs1Addr) @[BranchForward.scala 133:27]
        node _T_230 = and(_T_228, _T_229) @[BranchForward.scala 132:83]
        when _T_230 : @[BranchForward.scala 133:43]
          io.frwd_A <= UInt<4>("h08") @[BranchForward.scala 134:23]
          skip @[BranchForward.scala 133:43]
        else : @[BranchForward.scala 140:44]
          node _T_231 = neq(io.mem_wr_rdAddr, UInt<1>("h00")) @[BranchForward.scala 135:37]
          node _T_232 = eq(io.mem_wr_memRead, UInt<1>("h01")) @[BranchForward.scala 135:73]
          node _T_233 = and(_T_231, _T_232) @[BranchForward.scala 135:52]
          node _T_234 = neq(io.id_ex_rdAddr, UInt<1>("h00")) @[BranchForward.scala 137:28]
          node _T_235 = eq(io.id_ex_rdAddr, io.rs1Addr) @[BranchForward.scala 137:64]
          node _T_236 = and(_T_234, _T_235) @[BranchForward.scala 137:44]
          node _T_237 = not(_T_236) @[BranchForward.scala 137:9]
          node _T_238 = and(_T_233, _T_237) @[BranchForward.scala 135:81]
          node _T_239 = neq(io.ex_mem_rdAddr, UInt<1>("h00")) @[BranchForward.scala 139:29]
          node _T_240 = eq(io.ex_mem_rdAddr, io.rs1Addr) @[BranchForward.scala 139:66]
          node _T_241 = and(_T_239, _T_240) @[BranchForward.scala 139:45]
          node _T_242 = not(_T_241) @[BranchForward.scala 139:9]
          node _T_243 = and(_T_238, _T_242) @[BranchForward.scala 137:81]
          node _T_244 = eq(io.mem_wr_rdAddr, io.rs1Addr) @[BranchForward.scala 140:27]
          node _T_245 = and(_T_243, _T_244) @[BranchForward.scala 139:83]
          when _T_245 : @[BranchForward.scala 140:44]
            io.frwd_A <= UInt<4>("h0a") @[BranchForward.scala 142:23]
            skip @[BranchForward.scala 140:44]
        skip @[BranchForward.scala 111:36]
    
  module structuralDetector : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1Addr : UInt<5>, flip rs2Addr : UInt<5>, flip mem_wb_regWr : UInt<1>, flip mem_wb_rdAddr : UInt<5>, frwd_A : UInt<1>, frwd_B : UInt<1>}
    
    io.frwd_A <= UInt<1>("h00") @[structural detector.scala 15:15]
    io.frwd_B <= UInt<1>("h00") @[structural detector.scala 16:15]
    node _T = eq(io.mem_wb_regWr, UInt<1>("h01")) @[structural detector.scala 17:26]
    node _T_1 = eq(io.mem_wb_rdAddr, io.rs1Addr) @[structural detector.scala 17:55]
    node _T_2 = and(_T, _T_1) @[structural detector.scala 17:34]
    when _T_2 : @[structural detector.scala 17:71]
      io.frwd_A <= UInt<1>("h01") @[structural detector.scala 18:19]
      skip @[structural detector.scala 17:71]
    else : @[structural detector.scala 19:17]
      io.frwd_A <= UInt<1>("h00") @[structural detector.scala 20:19]
      skip @[structural detector.scala 19:17]
    node _T_3 = eq(io.mem_wb_regWr, UInt<1>("h01")) @[structural detector.scala 22:26]
    node _T_4 = eq(io.mem_wb_rdAddr, io.rs2Addr) @[structural detector.scala 22:54]
    node _T_5 = and(_T_3, _T_4) @[structural detector.scala 22:34]
    when _T_5 : @[structural detector.scala 22:70]
      io.frwd_B <= UInt<1>("h01") @[structural detector.scala 23:19]
      skip @[structural detector.scala 22:70]
    else : @[structural detector.scala 24:17]
      io.frwd_B <= UInt<1>("h00") @[structural detector.scala 25:19]
      skip @[structural detector.scala 24:17]
    
  module hazardDetection : 
    input clock : Clock
    input reset : Reset
    output io : {flip id_ex_memRead : UInt<1>, flip id_ex_rdAddr : UInt<5>, flip if_id_in_inst : UInt<32>, flip in_pc : SInt<32>, flip in_pc4 : SInt<32>, inst_frwd : UInt<1>, pc_frwd : UInt<1>, ctrl_frwd : UInt<1>, if_id_inst_out : UInt<32>, pc4_out : SInt<32>, pc_out : SInt<32>}
    
    node rs1Addr = bits(io.if_id_in_inst, 19, 15) @[hazardDetection.scala 21:35]
    node rs2Addr = bits(io.if_id_in_inst, 24, 20) @[hazardDetection.scala 22:35]
    node _T = eq(io.id_ex_memRead, UInt<1>("h01")) @[hazardDetection.scala 23:27]
    node _T_1 = eq(io.id_ex_rdAddr, rs1Addr) @[hazardDetection.scala 23:59]
    node _T_2 = eq(io.id_ex_rdAddr, rs2Addr) @[hazardDetection.scala 23:91]
    node _T_3 = or(_T_1, _T_2) @[hazardDetection.scala 23:72]
    node _T_4 = and(_T, _T_3) @[hazardDetection.scala 23:38]
    when _T_4 : @[hazardDetection.scala 23:105]
      io.inst_frwd <= UInt<1>("h01") @[hazardDetection.scala 24:22]
      io.pc_frwd <= UInt<1>("h01") @[hazardDetection.scala 25:20]
      io.ctrl_frwd <= UInt<1>("h01") @[hazardDetection.scala 26:22]
      io.if_id_inst_out <= io.if_id_in_inst @[hazardDetection.scala 27:27]
      io.pc_out <= io.in_pc @[hazardDetection.scala 28:19]
      io.pc4_out <= io.in_pc4 @[hazardDetection.scala 29:20]
      skip @[hazardDetection.scala 23:105]
    else : @[hazardDetection.scala 30:16]
      io.inst_frwd <= UInt<1>("h00") @[hazardDetection.scala 31:22]
      io.pc_frwd <= UInt<1>("h00") @[hazardDetection.scala 32:20]
      io.ctrl_frwd <= UInt<1>("h00") @[hazardDetection.scala 33:22]
      io.if_id_inst_out <= io.if_id_in_inst @[hazardDetection.scala 34:27]
      io.pc4_out <= io.in_pc4 @[hazardDetection.scala 35:20]
      io.pc_out <= io.in_pc @[hazardDetection.scala 36:19]
      skip @[hazardDetection.scala 30:16]
    
  module if_id : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_pc : SInt<32>, flip in_pc4 : SInt<32>, flip in_inst : UInt<32>, pc_out : SInt<32>, pc4_out : SInt<32>, inst_out : UInt<32>}
    
    reg reg_opCode : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF-ID reg.scala 33:29]
    reg reg_pc : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[IF-ID reg.scala 34:25]
    reg reg_pc4 : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[IF-ID reg.scala 35:26]
    reg reg_imm : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF-ID reg.scala 36:26]
    reg reg_inst : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF-ID reg.scala 42:27]
    reg_inst <= io.in_inst @[IF-ID reg.scala 44:14]
    reg_pc <= io.in_pc @[IF-ID reg.scala 46:12]
    reg_pc4 <= io.in_pc4 @[IF-ID reg.scala 47:13]
    io.inst_out <= reg_inst @[IF-ID reg.scala 55:17]
    io.pc_out <= reg_pc @[IF-ID reg.scala 57:15]
    io.pc4_out <= reg_pc4 @[IF-ID reg.scala 58:16]
    
  module id_ex : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_c_memWrite : UInt<1>, flip in_c_branch : UInt<1>, flip in_c_memRead : UInt<1>, flip in_c_regWrite : UInt<1>, flip in_c_memToReg : UInt<1>, flip in_c_alu_Operation : UInt<3>, flip in_c_operand_A : UInt<2>, flip in_c_operand_B : UInt<1>, flip in_c_nextPc : UInt<2>, flip in_pc : SInt<32>, flip in_pc4 : SInt<32>, flip in_imm : SInt<32>, flip in_rs1 : SInt<32>, flip in_rs2 : SInt<32>, flip in_rs1Addr : UInt<5>, flip in_rs2Addr : UInt<5>, flip in_Rdaddr : UInt<5>, flip in_aluCout : UInt<11>, flip in_func3 : UInt<3>, flip in_func7 : UInt<7>, c_memWrite_out : UInt<1>, c_branch_out : UInt<1>, c_memRead_out : UInt<1>, c_regWrite_out : UInt<1>, c_memToReg_out : UInt<1>, c_alu_Operation_out : UInt<3>, c_operand_A_out : UInt<2>, c_operand_B_out : UInt<1>, c_nextPc_out : UInt<2>, pc_out : SInt<32>, pc4_out : SInt<32>, imm_out : SInt<32>, rs1_out : SInt<32>, rs2_out : SInt<32>, rs1Addr_out : UInt<5>, rs2Addr_out : UInt<5>, rdaddr_out : UInt<5>, aluCout_out : UInt<11>, func3_out : UInt<3>, func7_out : UInt<7>}
    
    reg regc_memWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID-EX.scala 50:32]
    reg regc_branch : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID-EX.scala 51:30]
    reg regc_memRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID-EX.scala 52:31]
    reg regc_regWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID-EX.scala 53:32]
    reg regc_memToReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID-EX.scala 54:32]
    reg regc_alu_Operation : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[ID-EX.scala 55:37]
    reg regc_operand_A : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ID-EX.scala 56:33]
    reg regc_operand_B : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[ID-EX.scala 57:33]
    reg regc_nextPc : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[ID-EX.scala 58:30]
    reg regpc : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID-EX.scala 59:24]
    reg regpc4 : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID-EX.scala 60:25]
    reg regimm : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID-EX.scala 61:25]
    reg regrs1 : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID-EX.scala 62:25]
    reg regrs2 : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[ID-EX.scala 63:25]
    reg regrs1_Addr : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID-EX.scala 64:30]
    reg regrs2_Addr : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID-EX.scala 65:30]
    reg regrd_addr : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[ID-EX.scala 66:29]
    reg regAluCout : UInt<11>, clock with : (reset => (reset, UInt<11>("h00"))) @[ID-EX.scala 67:29]
    reg regFunc3 : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[ID-EX.scala 68:27]
    reg regFunc7 : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[ID-EX.scala 69:27]
    regc_memWrite <= io.in_c_memWrite @[ID-EX.scala 71:19]
    regc_branch <= io.in_c_branch @[ID-EX.scala 72:17]
    regc_memRead <= io.in_c_memRead @[ID-EX.scala 73:18]
    regc_regWrite <= io.in_c_regWrite @[ID-EX.scala 74:19]
    regc_memToReg <= io.in_c_memToReg @[ID-EX.scala 75:19]
    regc_alu_Operation <= io.in_c_alu_Operation @[ID-EX.scala 76:24]
    regc_operand_A <= io.in_c_operand_A @[ID-EX.scala 77:20]
    regc_operand_B <= io.in_c_operand_B @[ID-EX.scala 78:20]
    regpc <= io.in_pc @[ID-EX.scala 79:11]
    regpc4 <= io.in_pc4 @[ID-EX.scala 80:12]
    regimm <= io.in_imm @[ID-EX.scala 81:12]
    regrd_addr <= io.in_Rdaddr @[ID-EX.scala 82:16]
    regrs1 <= io.in_rs1 @[ID-EX.scala 83:12]
    regrs2 <= io.in_rs2 @[ID-EX.scala 84:12]
    regrs1_Addr <= io.in_rs1Addr @[ID-EX.scala 85:17]
    regrs2_Addr <= io.in_rs2Addr @[ID-EX.scala 86:17]
    regc_nextPc <= io.in_c_nextPc @[ID-EX.scala 87:17]
    regAluCout <= io.in_aluCout @[ID-EX.scala 88:16]
    regFunc3 <= io.in_func3 @[ID-EX.scala 89:14]
    regFunc7 <= io.in_func7 @[ID-EX.scala 90:14]
    io.c_memWrite_out <= regc_memWrite @[ID-EX.scala 92:23]
    io.c_branch_out <= regc_branch @[ID-EX.scala 93:21]
    io.c_memRead_out <= regc_memRead @[ID-EX.scala 94:22]
    io.c_regWrite_out <= regc_regWrite @[ID-EX.scala 95:23]
    io.c_memToReg_out <= regc_memToReg @[ID-EX.scala 96:23]
    io.c_alu_Operation_out <= regc_alu_Operation @[ID-EX.scala 97:28]
    io.c_operand_A_out <= regc_operand_A @[ID-EX.scala 98:24]
    io.c_operand_B_out <= regc_operand_B @[ID-EX.scala 99:24]
    io.pc_out <= regpc @[ID-EX.scala 100:15]
    io.pc4_out <= regpc4 @[ID-EX.scala 101:16]
    io.imm_out <= regimm @[ID-EX.scala 102:16]
    io.rdaddr_out <= regrd_addr @[ID-EX.scala 103:19]
    io.rs1_out <= regrs1 @[ID-EX.scala 104:16]
    io.rs2_out <= regrs2 @[ID-EX.scala 105:16]
    io.rs1Addr_out <= regrs1_Addr @[ID-EX.scala 106:20]
    io.rs2Addr_out <= regrs2_Addr @[ID-EX.scala 107:20]
    io.c_nextPc_out <= regc_nextPc @[ID-EX.scala 108:21]
    io.aluCout_out <= regAluCout @[ID-EX.scala 109:20]
    io.func3_out <= regFunc3 @[ID-EX.scala 110:18]
    io.func7_out <= regFunc7 @[ID-EX.scala 111:18]
    
  module ex_mem : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_c_memwr : UInt<1>, flip in_c_memrd : UInt<1>, flip in_c_memtoreg : UInt<1>, flip in_rs2 : SInt<32>, flip in_Rdaddr : UInt<5>, flip in_Rs2addr : UInt<5>, flip in_ALUout : SInt<32>, flip in_c_regWrite : UInt<1>, memwr_out : UInt<1>, memrd_out : UInt<1>, memtoreg_out : UInt<1>, rs2_out : SInt<32>, rdaddr_out : UInt<5>, rs2addr_out : UInt<5>, ALUout_out : SInt<32>, reg_write_out : UInt<1>}
    
    reg reg_memwr : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX-MEM.scala 26:28]
    reg reg_memrd : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX-MEM.scala 27:28]
    reg reg_memtoreg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX-MEM.scala 28:31]
    reg reg_rs2 : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[EX-MEM.scala 29:26]
    reg reg_Rdaddr : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[EX-MEM.scala 30:29]
    reg reg_Rs2addr : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[EX-MEM.scala 31:30]
    reg reg_Aluout : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[EX-MEM.scala 32:29]
    reg reg_regWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[EX-MEM.scala 33:31]
    reg_memwr <= io.in_c_memwr @[EX-MEM.scala 35:15]
    reg_memrd <= io.in_c_memrd @[EX-MEM.scala 36:15]
    reg_memtoreg <= io.in_c_memtoreg @[EX-MEM.scala 37:18]
    reg_rs2 <= io.in_rs2 @[EX-MEM.scala 38:13]
    reg_Rdaddr <= io.in_Rdaddr @[EX-MEM.scala 39:16]
    reg_Rs2addr <= io.in_Rs2addr @[EX-MEM.scala 40:17]
    reg_Aluout <= io.in_ALUout @[EX-MEM.scala 41:16]
    reg_regWrite <= io.in_c_regWrite @[EX-MEM.scala 42:18]
    io.memwr_out <= reg_memwr @[EX-MEM.scala 44:18]
    io.memrd_out <= reg_memrd @[EX-MEM.scala 45:18]
    io.memtoreg_out <= reg_memtoreg @[EX-MEM.scala 46:21]
    io.rs2_out <= reg_rs2 @[EX-MEM.scala 47:16]
    io.rdaddr_out <= reg_Rdaddr @[EX-MEM.scala 48:19]
    io.rs2addr_out <= reg_Rs2addr @[EX-MEM.scala 49:20]
    io.ALUout_out <= reg_Aluout @[EX-MEM.scala 50:19]
    io.reg_write_out <= reg_regWrite @[EX-MEM.scala 51:22]
    
  module mem_wr : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_c_memtoreg : UInt<1>, flip in_dataOut : SInt<32>, flip in_aluOut : SInt<32>, flip in_Rdaddr : UInt<5>, flip in_c_regWrite : UInt<1>, flip in_c_memRead : UInt<1>, c_memtoreg_out : UInt<1>, dataOut_out : SInt<32>, aluOut_out : SInt<32>, Rdaddr_out : UInt<5>, c_regWrite_out : UInt<1>, c_memRead_out : UInt<1>}
    
    reg Reg_nextPc : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Mem-WR.scala 22:29]
    reg Reg_dataOut : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Mem-WR.scala 23:30]
    reg Reg_aluOut : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Mem-WR.scala 24:29]
    reg Reg_Rdaddr : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Mem-WR.scala 25:29]
    reg Reg_regWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Mem-WR.scala 26:31]
    reg Reg_memRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Mem-WR.scala 27:30]
    Reg_nextPc <= io.in_c_memtoreg @[Mem-WR.scala 29:16]
    Reg_dataOut <= io.in_dataOut @[Mem-WR.scala 30:17]
    Reg_aluOut <= io.in_aluOut @[Mem-WR.scala 31:16]
    Reg_Rdaddr <= io.in_Rdaddr @[Mem-WR.scala 32:16]
    Reg_regWrite <= io.in_c_regWrite @[Mem-WR.scala 33:18]
    Reg_memRead <= io.in_c_memRead @[Mem-WR.scala 34:17]
    io.c_memtoreg_out <= Reg_nextPc @[Mem-WR.scala 36:23]
    io.dataOut_out <= Reg_dataOut @[Mem-WR.scala 37:20]
    io.aluOut_out <= Reg_aluOut @[Mem-WR.scala 38:19]
    io.Rdaddr_out <= Reg_Rdaddr @[Mem-WR.scala 39:19]
    io.c_regWrite_out <= Reg_regWrite @[Mem-WR.scala 40:23]
    io.c_memRead_out <= Reg_memRead @[Mem-WR.scala 41:22]
    
  module dataMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip writeData : UInt<1>, flip readData : UInt<1>, flip rdAddr : UInt<10>, flip dataIn : SInt<32>, dataOut : SInt<32>}
    
    cmem mem : SInt<32>[1024] @[DataMem.scala 15:15]
    node _T = eq(io.writeData, UInt<1>("h01")) @[DataMem.scala 16:24]
    when _T : @[DataMem.scala 16:32]
      write mport MPORT = mem[io.rdAddr], clock
      MPORT <= io.dataIn
      skip @[DataMem.scala 16:32]
    node _T_1 = eq(io.readData, UInt<1>("h01")) @[DataMem.scala 19:22]
    when _T_1 : @[DataMem.scala 19:29]
      read mport io_dataOut_MPORT = mem[io.rdAddr], clock @[DataMem.scala 20:31]
      io.dataOut <= io_dataOut_MPORT @[DataMem.scala 20:20]
      skip @[DataMem.scala 19:29]
    else : @[DataMem.scala 21:16]
      io.dataOut <= asSInt(UInt<1>("h00")) @[DataMem.scala 22:20]
      skip @[DataMem.scala 21:16]
    
  module control : 
    input clock : Clock
    input reset : Reset
    output io : {flip op_code : UInt<7>, memWrite : UInt<1>, branch : UInt<1>, memRead : UInt<1>, regWrite : UInt<1>, memToReg : UInt<1>, alu_Operation : UInt<3>, operand_A : UInt<2>, operand_B : UInt<1>, extend_Sel : UInt<2>, nextPc_Sel : UInt<2>}
    
    node _T = eq(io.op_code, UInt<6>("h033")) @[ControlUnit.scala 20:21]
    when _T : @[ControlUnit.scala 20:38]
      io.memWrite <= UInt<1>("h00") @[ControlUnit.scala 21:21]
      io.branch <= UInt<1>("h00") @[ControlUnit.scala 22:19]
      io.memRead <= UInt<1>("h00") @[ControlUnit.scala 23:20]
      io.regWrite <= UInt<1>("h01") @[ControlUnit.scala 24:21]
      io.memToReg <= UInt<1>("h00") @[ControlUnit.scala 25:21]
      io.alu_Operation <= UInt<1>("h00") @[ControlUnit.scala 26:26]
      io.operand_A <= UInt<1>("h00") @[ControlUnit.scala 27:22]
      io.operand_B <= UInt<1>("h00") @[ControlUnit.scala 28:22]
      io.extend_Sel <= UInt<1>("h00") @[ControlUnit.scala 29:23]
      io.nextPc_Sel <= UInt<1>("h00") @[ControlUnit.scala 30:23]
      skip @[ControlUnit.scala 20:38]
    else : @[ControlUnit.scala 31:44]
      node _T_1 = eq(io.op_code, UInt<5>("h013")) @[ControlUnit.scala 31:27]
      when _T_1 : @[ControlUnit.scala 31:44]
        io.memWrite <= UInt<1>("h00") @[ControlUnit.scala 32:21]
        io.branch <= UInt<1>("h00") @[ControlUnit.scala 33:19]
        io.memRead <= UInt<1>("h00") @[ControlUnit.scala 34:20]
        io.regWrite <= UInt<1>("h01") @[ControlUnit.scala 35:21]
        io.memToReg <= UInt<1>("h00") @[ControlUnit.scala 36:21]
        io.alu_Operation <= UInt<1>("h01") @[ControlUnit.scala 37:26]
        io.operand_A <= UInt<1>("h00") @[ControlUnit.scala 38:22]
        io.operand_B <= UInt<1>("h01") @[ControlUnit.scala 39:22]
        io.extend_Sel <= UInt<1>("h00") @[ControlUnit.scala 40:23]
        io.nextPc_Sel <= UInt<1>("h00") @[ControlUnit.scala 41:23]
        skip @[ControlUnit.scala 31:44]
      else : @[ControlUnit.scala 42:44]
        node _T_2 = eq(io.op_code, UInt<2>("h03")) @[ControlUnit.scala 42:27]
        when _T_2 : @[ControlUnit.scala 42:44]
          io.memWrite <= UInt<1>("h00") @[ControlUnit.scala 43:21]
          io.branch <= UInt<1>("h00") @[ControlUnit.scala 44:19]
          io.memRead <= UInt<1>("h01") @[ControlUnit.scala 45:20]
          io.regWrite <= UInt<1>("h01") @[ControlUnit.scala 46:21]
          io.memToReg <= UInt<1>("h01") @[ControlUnit.scala 47:21]
          io.alu_Operation <= UInt<3>("h04") @[ControlUnit.scala 48:26]
          io.operand_A <= UInt<1>("h00") @[ControlUnit.scala 49:22]
          io.operand_B <= UInt<1>("h01") @[ControlUnit.scala 50:22]
          io.extend_Sel <= UInt<1>("h00") @[ControlUnit.scala 51:23]
          io.nextPc_Sel <= UInt<1>("h00") @[ControlUnit.scala 52:23]
          skip @[ControlUnit.scala 42:44]
        else : @[ControlUnit.scala 53:44]
          node _T_3 = eq(io.op_code, UInt<6>("h023")) @[ControlUnit.scala 53:27]
          when _T_3 : @[ControlUnit.scala 53:44]
            io.memWrite <= UInt<1>("h01") @[ControlUnit.scala 54:21]
            io.branch <= UInt<1>("h00") @[ControlUnit.scala 55:19]
            io.memRead <= UInt<1>("h00") @[ControlUnit.scala 56:20]
            io.regWrite <= UInt<1>("h00") @[ControlUnit.scala 57:21]
            io.memToReg <= UInt<1>("h00") @[ControlUnit.scala 58:21]
            io.alu_Operation <= UInt<3>("h05") @[ControlUnit.scala 59:26]
            io.operand_A <= UInt<1>("h00") @[ControlUnit.scala 60:22]
            io.operand_B <= UInt<1>("h01") @[ControlUnit.scala 61:22]
            io.extend_Sel <= UInt<1>("h01") @[ControlUnit.scala 62:23]
            io.nextPc_Sel <= UInt<1>("h00") @[ControlUnit.scala 63:23]
            skip @[ControlUnit.scala 53:44]
          else : @[ControlUnit.scala 64:44]
            node _T_4 = eq(io.op_code, UInt<7>("h063")) @[ControlUnit.scala 64:27]
            when _T_4 : @[ControlUnit.scala 64:44]
              io.memWrite <= UInt<1>("h00") @[ControlUnit.scala 65:21]
              io.branch <= UInt<1>("h01") @[ControlUnit.scala 66:19]
              io.memRead <= UInt<1>("h00") @[ControlUnit.scala 67:20]
              io.regWrite <= UInt<1>("h00") @[ControlUnit.scala 68:21]
              io.memToReg <= UInt<1>("h00") @[ControlUnit.scala 69:21]
              io.alu_Operation <= UInt<2>("h02") @[ControlUnit.scala 70:26]
              io.operand_A <= UInt<1>("h00") @[ControlUnit.scala 71:22]
              io.operand_B <= UInt<1>("h00") @[ControlUnit.scala 72:22]
              io.extend_Sel <= UInt<1>("h00") @[ControlUnit.scala 73:23]
              io.nextPc_Sel <= UInt<1>("h01") @[ControlUnit.scala 74:23]
              skip @[ControlUnit.scala 64:44]
            else : @[ControlUnit.scala 75:44]
              node _T_5 = eq(io.op_code, UInt<6>("h037")) @[ControlUnit.scala 75:27]
              when _T_5 : @[ControlUnit.scala 75:44]
                io.memWrite <= UInt<1>("h00") @[ControlUnit.scala 76:21]
                io.branch <= UInt<1>("h00") @[ControlUnit.scala 77:19]
                io.memRead <= UInt<1>("h00") @[ControlUnit.scala 78:20]
                io.regWrite <= UInt<1>("h01") @[ControlUnit.scala 79:21]
                io.memToReg <= UInt<1>("h00") @[ControlUnit.scala 80:21]
                io.alu_Operation <= UInt<3>("h06") @[ControlUnit.scala 81:26]
                io.operand_A <= UInt<2>("h03") @[ControlUnit.scala 82:22]
                io.operand_B <= UInt<1>("h01") @[ControlUnit.scala 83:22]
                io.extend_Sel <= UInt<2>("h02") @[ControlUnit.scala 84:23]
                io.nextPc_Sel <= UInt<1>("h00") @[ControlUnit.scala 85:23]
                skip @[ControlUnit.scala 75:44]
              else : @[ControlUnit.scala 86:44]
                node _T_6 = eq(io.op_code, UInt<7>("h06f")) @[ControlUnit.scala 86:27]
                when _T_6 : @[ControlUnit.scala 86:44]
                  io.memWrite <= UInt<1>("h00") @[ControlUnit.scala 87:21]
                  io.branch <= UInt<1>("h00") @[ControlUnit.scala 88:19]
                  io.memRead <= UInt<1>("h00") @[ControlUnit.scala 89:20]
                  io.regWrite <= UInt<1>("h01") @[ControlUnit.scala 90:21]
                  io.memToReg <= UInt<1>("h00") @[ControlUnit.scala 91:21]
                  io.alu_Operation <= UInt<2>("h03") @[ControlUnit.scala 92:26]
                  io.operand_A <= UInt<2>("h02") @[ControlUnit.scala 93:22]
                  io.operand_B <= UInt<1>("h00") @[ControlUnit.scala 94:22]
                  io.extend_Sel <= UInt<1>("h00") @[ControlUnit.scala 95:23]
                  io.nextPc_Sel <= UInt<2>("h02") @[ControlUnit.scala 96:23]
                  skip @[ControlUnit.scala 86:44]
                else : @[ControlUnit.scala 97:44]
                  node _T_7 = eq(io.op_code, UInt<5>("h017")) @[ControlUnit.scala 97:27]
                  when _T_7 : @[ControlUnit.scala 97:44]
                    io.memWrite <= UInt<1>("h00") @[ControlUnit.scala 98:21]
                    io.branch <= UInt<1>("h00") @[ControlUnit.scala 99:19]
                    io.memRead <= UInt<1>("h00") @[ControlUnit.scala 100:20]
                    io.regWrite <= UInt<1>("h01") @[ControlUnit.scala 101:21]
                    io.memToReg <= UInt<1>("h00") @[ControlUnit.scala 102:21]
                    io.alu_Operation <= UInt<3>("h07") @[ControlUnit.scala 103:26]
                    io.operand_A <= UInt<2>("h02") @[ControlUnit.scala 104:22]
                    io.operand_B <= UInt<1>("h01") @[ControlUnit.scala 105:22]
                    io.extend_Sel <= UInt<2>("h02") @[ControlUnit.scala 106:23]
                    io.nextPc_Sel <= UInt<1>("h00") @[ControlUnit.scala 107:23]
                    skip @[ControlUnit.scala 97:44]
                  else : @[ControlUnit.scala 108:44]
                    node _T_8 = eq(io.op_code, UInt<7>("h067")) @[ControlUnit.scala 108:27]
                    when _T_8 : @[ControlUnit.scala 108:44]
                      io.memWrite <= UInt<1>("h00") @[ControlUnit.scala 109:21]
                      io.branch <= UInt<1>("h00") @[ControlUnit.scala 110:19]
                      io.memRead <= UInt<1>("h00") @[ControlUnit.scala 111:20]
                      io.regWrite <= UInt<1>("h01") @[ControlUnit.scala 112:21]
                      io.memToReg <= UInt<1>("h00") @[ControlUnit.scala 113:21]
                      io.alu_Operation <= UInt<2>("h03") @[ControlUnit.scala 114:26]
                      io.operand_A <= UInt<2>("h02") @[ControlUnit.scala 115:22]
                      io.operand_B <= UInt<1>("h01") @[ControlUnit.scala 116:22]
                      io.extend_Sel <= UInt<1>("h00") @[ControlUnit.scala 117:23]
                      io.nextPc_Sel <= UInt<2>("h03") @[ControlUnit.scala 118:23]
                      skip @[ControlUnit.scala 108:44]
                    else : @[ControlUnit.scala 119:16]
                      io.memWrite is invalid @[ControlUnit.scala 120:21]
                      io.branch is invalid @[ControlUnit.scala 121:19]
                      io.memRead is invalid @[ControlUnit.scala 122:20]
                      io.regWrite is invalid @[ControlUnit.scala 123:21]
                      io.memToReg is invalid @[ControlUnit.scala 124:21]
                      io.alu_Operation is invalid @[ControlUnit.scala 125:26]
                      io.operand_A is invalid @[ControlUnit.scala 126:22]
                      io.operand_B is invalid @[ControlUnit.scala 127:22]
                      io.extend_Sel is invalid @[ControlUnit.scala 128:23]
                      io.nextPc_Sel is invalid @[ControlUnit.scala 129:23]
                      skip @[ControlUnit.scala 119:16]
    
  module immdValGen : 
    input clock : Clock
    input reset : Reset
    output io : {flip instr : UInt<32>, flip pc : SInt<32>, s_imm : SInt<32>, sb_imm : SInt<32>, u_imm : SInt<32>, uj_imm : SInt<32>, i_imm : SInt<32>}
    
    node s1 = bits(io.instr, 11, 7) @[ImmGen.scala 17:22]
    node s2 = bits(io.instr, 31, 25) @[ImmGen.scala 18:22]
    node s3 = cat(s2, s1) @[Cat.scala 30:58]
    node _s4_T = bits(s3, 11, 11) @[ImmGen.scala 20:29]
    node _s4_T_1 = bits(_s4_T, 0, 0) @[Bitwise.scala 72:15]
    node s4_hi = mux(_s4_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node s4 = cat(s4_hi, s3) @[Cat.scala 30:58]
    node _io_s_imm_T = asSInt(s4) @[ImmGen.scala 21:26]
    io.s_imm <= _io_s_imm_T @[ImmGen.scala 21:14]
    node sb1 = bits(io.instr, 11, 8) @[ImmGen.scala 23:23]
    node sb2 = bits(io.instr, 30, 25) @[ImmGen.scala 24:23]
    node sb3 = bits(io.instr, 7, 7) @[ImmGen.scala 25:23]
    node sb4 = bits(io.instr, 31, 31) @[ImmGen.scala 26:23]
    node sb5_lo_lo = asUInt(asSInt(UInt<1>("h00"))) @[Cat.scala 30:58]
    node sb5_lo = cat(sb1, sb5_lo_lo) @[Cat.scala 30:58]
    node sb5_hi_hi = cat(sb4, sb3) @[Cat.scala 30:58]
    node sb5_hi = cat(sb5_hi_hi, sb2) @[Cat.scala 30:58]
    node sb5 = cat(sb5_hi, sb5_lo) @[Cat.scala 30:58]
    node _sb6_T = bits(sb5, 12, 12) @[ImmGen.scala 28:31]
    node _sb6_T_1 = bits(_sb6_T, 0, 0) @[Bitwise.scala 72:15]
    node sb6_hi = mux(_sb6_T_1, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node _sb6_T_2 = cat(sb6_hi, sb5) @[Cat.scala 30:58]
    node sb6 = asSInt(_sb6_T_2) @[ImmGen.scala 28:49]
    node _io_sb_imm_T = add(sb6, io.pc) @[ImmGen.scala 29:22]
    node _io_sb_imm_T_1 = tail(_io_sb_imm_T, 1) @[ImmGen.scala 29:22]
    node _io_sb_imm_T_2 = asSInt(_io_sb_imm_T_1) @[ImmGen.scala 29:22]
    io.sb_imm <= _io_sb_imm_T_2 @[ImmGen.scala 29:15]
    node u1 = bits(io.instr, 31, 12) @[ImmGen.scala 31:22]
    node _u2_T = bits(u1, 19, 19) @[ImmGen.scala 32:29]
    node _u2_T_1 = bits(_u2_T, 0, 0) @[Bitwise.scala 72:15]
    node u2_hi = mux(_u2_T_1, UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node u2 = cat(u2_hi, u1) @[Cat.scala 30:58]
    node u3 = dshl(u2, UInt<4>("h0c")) @[ImmGen.scala 33:17]
    node _io_u_imm_T = asSInt(u3) @[ImmGen.scala 34:26]
    io.u_imm <= _io_u_imm_T @[ImmGen.scala 34:14]
    node uj1 = bits(io.instr, 30, 21) @[ImmGen.scala 36:23]
    node uj2 = bits(io.instr, 20, 20) @[ImmGen.scala 37:23]
    node uj3 = bits(io.instr, 19, 12) @[ImmGen.scala 38:23]
    node uj4 = bits(io.instr, 31, 31) @[ImmGen.scala 39:23]
    node uj5_lo_lo = asUInt(asSInt(UInt<1>("h00"))) @[Cat.scala 30:58]
    node uj5_lo = cat(uj1, uj5_lo_lo) @[Cat.scala 30:58]
    node uj5_hi_hi = cat(uj4, uj3) @[Cat.scala 30:58]
    node uj5_hi = cat(uj5_hi_hi, uj2) @[Cat.scala 30:58]
    node uj5 = cat(uj5_hi, uj5_lo) @[Cat.scala 30:58]
    node _uj6_T = bits(uj5, 20, 20) @[ImmGen.scala 41:31]
    node _uj6_T_1 = bits(_uj6_T, 0, 0) @[Bitwise.scala 72:15]
    node uj6_hi = mux(_uj6_T_1, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
    node _uj6_T_2 = cat(uj6_hi, uj5) @[Cat.scala 30:58]
    node uj6 = asSInt(_uj6_T_2) @[ImmGen.scala 41:49]
    node _io_uj_imm_T = add(uj6, io.pc) @[ImmGen.scala 42:22]
    node _io_uj_imm_T_1 = tail(_io_uj_imm_T, 1) @[ImmGen.scala 42:22]
    node _io_uj_imm_T_2 = asSInt(_io_uj_imm_T_1) @[ImmGen.scala 42:22]
    io.uj_imm <= _io_uj_imm_T_2 @[ImmGen.scala 42:15]
    node i1 = bits(io.instr, 31, 20) @[ImmGen.scala 44:22]
    node _i2_T = bits(i1, 11, 11) @[ImmGen.scala 45:29]
    node _i2_T_1 = bits(_i2_T, 0, 0) @[Bitwise.scala 72:15]
    node i2_hi = mux(_i2_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node i2 = cat(i2_hi, i1) @[Cat.scala 30:58]
    node _io_i_imm_T = asSInt(i2) @[ImmGen.scala 46:26]
    io.i_imm <= _io_i_imm_T @[ImmGen.scala 46:14]
    
  module aluControl : 
    input clock : Clock
    input reset : Reset
    output io : {flip alu_Operation : UInt<3>, flip func3 : UInt<3>, flip func7 : UInt<7>, out : UInt<11>}
    
    io.out <= UInt<1>("h00") @[ALU_Control.scala 13:12]
    node _T = eq(io.alu_Operation, UInt<1>("h00")) @[ALU_Control.scala 14:27]
    when _T : @[ALU_Control.scala 14:40]
      node io_out_hi = cat(UInt<1>("h00"), io.func7) @[Cat.scala 30:58]
      node _io_out_T = cat(io_out_hi, io.func3) @[Cat.scala 30:58]
      io.out <= _io_out_T @[ALU_Control.scala 15:16]
      skip @[ALU_Control.scala 14:40]
    else : @[ALU_Control.scala 16:46]
      node _T_1 = eq(io.alu_Operation, UInt<1>("h01")) @[ALU_Control.scala 16:33]
      when _T_1 : @[ALU_Control.scala 16:46]
        node io_out_hi_1 = cat(UInt<1>("h00"), UInt<1>("h00")) @[Cat.scala 30:58]
        node _io_out_T_1 = cat(io_out_hi_1, io.func3) @[Cat.scala 30:58]
        io.out <= _io_out_T_1 @[ALU_Control.scala 17:16]
        skip @[ALU_Control.scala 16:46]
      else : @[ALU_Control.scala 18:46]
        node _T_2 = eq(io.alu_Operation, UInt<3>("h05")) @[ALU_Control.scala 18:33]
        when _T_2 : @[ALU_Control.scala 18:46]
          io.out <= UInt<1>("h00") @[ALU_Control.scala 19:16]
          skip @[ALU_Control.scala 18:46]
        else : @[ALU_Control.scala 20:46]
          node _T_3 = eq(io.alu_Operation, UInt<2>("h02")) @[ALU_Control.scala 20:33]
          when _T_3 : @[ALU_Control.scala 20:46]
            node _io_out_T_2 = cat(UInt<8>("h080"), io.func3) @[Cat.scala 30:58]
            io.out <= _io_out_T_2 @[ALU_Control.scala 21:16]
            skip @[ALU_Control.scala 20:46]
          else : @[ALU_Control.scala 22:46]
            node _T_4 = eq(io.alu_Operation, UInt<3>("h06")) @[ALU_Control.scala 22:33]
            when _T_4 : @[ALU_Control.scala 22:46]
              io.out <= UInt<1>("h00") @[ALU_Control.scala 23:16]
              skip @[ALU_Control.scala 22:46]
            else : @[ALU_Control.scala 24:46]
              node _T_5 = eq(io.alu_Operation, UInt<2>("h03")) @[ALU_Control.scala 24:33]
              when _T_5 : @[ALU_Control.scala 24:46]
                io.out <= UInt<11>("h07ff") @[ALU_Control.scala 25:16]
                skip @[ALU_Control.scala 24:46]
              else : @[ALU_Control.scala 26:46]
                node _T_6 = eq(io.alu_Operation, UInt<3>("h04")) @[ALU_Control.scala 26:33]
                when _T_6 : @[ALU_Control.scala 26:46]
                  io.out <= UInt<1>("h00") @[ALU_Control.scala 27:16]
                  skip @[ALU_Control.scala 26:46]
                else : @[ALU_Control.scala 28:46]
                  node _T_7 = eq(io.alu_Operation, UInt<3>("h07")) @[ALU_Control.scala 28:33]
                  when _T_7 : @[ALU_Control.scala 28:46]
                    io.out <= UInt<1>("h00") @[ALU_Control.scala 29:16]
                    skip @[ALU_Control.scala 28:46]
                  else : @[ALU_Control.scala 30:16]
                    io.out is invalid @[ALU_Control.scala 31:16]
                    skip @[ALU_Control.scala 30:16]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_A : SInt<32>, flip in_B : SInt<32>, flip alu_Op : UInt<11>, out : SInt<32>}
    
    io.out <= asSInt(UInt<1>("h00")) @[ALU.scala 33:12]
    node _T = eq(UInt<11>("h00"), io.alu_Op) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _io_out_T = add(io.in_A, io.in_B) @[ALU.scala 37:31]
      node _io_out_T_1 = tail(_io_out_T, 1) @[ALU.scala 37:31]
      node _io_out_T_2 = asSInt(_io_out_T_1) @[ALU.scala 37:31]
      io.out <= _io_out_T_2 @[ALU.scala 37:20]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<11>("h08"), io.alu_Op) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _io_out_T_3 = sub(io.in_A, io.in_B) @[ALU.scala 40:31]
        node _io_out_T_4 = tail(_io_out_T_3, 1) @[ALU.scala 40:31]
        node _io_out_T_5 = asSInt(_io_out_T_4) @[ALU.scala 40:31]
        io.out <= _io_out_T_5 @[ALU.scala 40:20]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<11>("h02"), io.alu_Op) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          node _T_3 = lt(io.in_A, io.in_B) @[ALU.scala 43:26]
          when _T_3 : @[ALU.scala 43:37]
            io.out <= asSInt(UInt<2>("h01")) @[ALU.scala 44:24]
            skip @[ALU.scala 43:37]
          else : @[ALU.scala 45:24]
            io.out <= asSInt(UInt<1>("h00")) @[ALU.scala 46:24]
            skip @[ALU.scala 45:24]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_4 = eq(UInt<11>("h03"), io.alu_Op) @[Conditional.scala 37:30]
          when _T_4 : @[Conditional.scala 39:67]
            node _T_5 = asUInt(io.in_A) @[ALU.scala 50:26]
            node _T_6 = asUInt(io.in_B) @[ALU.scala 50:43]
            node _T_7 = lt(_T_5, _T_6) @[ALU.scala 50:33]
            when _T_7 : @[ALU.scala 50:51]
              io.out <= asSInt(UInt<2>("h01")) @[ALU.scala 51:24]
              skip @[ALU.scala 50:51]
            else : @[ALU.scala 52:25]
              io.out <= asSInt(UInt<1>("h00")) @[ALU.scala 53:24]
              skip @[ALU.scala 52:25]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_8 = eq(UInt<11>("h01d"), io.alu_Op) @[Conditional.scala 37:30]
            when _T_8 : @[Conditional.scala 39:67]
              node _io_out_T_6 = bits(io.in_B, 4, 0) @[ALU.scala 57:41]
              node _io_out_T_7 = dshr(io.in_A, _io_out_T_6) @[ALU.scala 57:31]
              io.out <= _io_out_T_7 @[ALU.scala 57:20]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_9 = eq(UInt<11>("h05"), io.alu_Op) @[Conditional.scala 37:30]
              when _T_9 : @[Conditional.scala 39:67]
                node _io_out_T_8 = bits(io.in_B, 4, 0) @[ALU.scala 60:41]
                node _io_out_T_9 = dshr(io.in_A, _io_out_T_8) @[ALU.scala 60:31]
                io.out <= _io_out_T_9 @[ALU.scala 60:20]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_10 = eq(UInt<11>("h01"), io.alu_Op) @[Conditional.scala 37:30]
                when _T_10 : @[Conditional.scala 39:67]
                  node sr = bits(io.in_B, 4, 0) @[ALU.scala 63:29]
                  node _io_out_T_10 = dshl(io.in_A, sr) @[ALU.scala 64:31]
                  io.out <= _io_out_T_10 @[ALU.scala 64:20]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_11 = eq(UInt<11>("h07"), io.alu_Op) @[Conditional.scala 37:30]
                  when _T_11 : @[Conditional.scala 39:67]
                    node _io_out_T_11 = and(io.in_A, io.in_B) @[ALU.scala 67:31]
                    node _io_out_T_12 = asSInt(_io_out_T_11) @[ALU.scala 67:31]
                    io.out <= _io_out_T_12 @[ALU.scala 67:20]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_12 = eq(UInt<11>("h06"), io.alu_Op) @[Conditional.scala 37:30]
                    when _T_12 : @[Conditional.scala 39:67]
                      node _io_out_T_13 = or(io.in_A, io.in_B) @[ALU.scala 70:29]
                      node _io_out_T_14 = asSInt(_io_out_T_13) @[ALU.scala 70:29]
                      io.out <= _io_out_T_14 @[ALU.scala 70:19]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_13 = eq(UInt<11>("h04"), io.alu_Op) @[Conditional.scala 37:30]
                      when _T_13 : @[Conditional.scala 39:67]
                        node _io_out_T_15 = xor(io.in_A, io.in_B) @[ALU.scala 73:28]
                        node _io_out_T_16 = asSInt(_io_out_T_15) @[ALU.scala 73:28]
                        io.out <= _io_out_T_16 @[ALU.scala 73:16]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_14 = eq(UInt<11>("h01f"), io.alu_Op) @[Conditional.scala 37:30]
                        when _T_14 : @[Conditional.scala 39:67]
                          io.out <= io.in_A @[ALU.scala 76:20]
                          skip @[Conditional.scala 39:67]
    
  module regFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip writeData : SInt<32>, flip rs1_addr : UInt<5>, flip rs2_addr : UInt<5>, flip rd_addr : UInt<5>, rs1 : SInt<32>, rs2 : SInt<32>, flip regWrite : UInt<1>}
    
    wire _register_WIRE : SInt<32>[32] @[Reg_Unit.scala 16:35]
    _register_WIRE[0] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[1] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[2] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[3] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[4] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[5] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[6] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[7] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[8] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[9] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[10] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[11] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[12] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[13] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[14] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[15] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[16] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[17] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[18] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[19] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[20] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[21] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[22] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[23] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[24] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[25] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[26] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[27] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[28] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[29] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[30] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    _register_WIRE[31] <= asSInt(UInt<32>("h00")) @[Reg_Unit.scala 16:35]
    reg register : SInt<32>[32], clock with : (reset => (reset, _register_WIRE)) @[Reg_Unit.scala 16:27]
    register[0] <= asSInt(UInt<1>("h00")) @[Reg_Unit.scala 17:17]
    io.rs1 <= register[io.rs1_addr] @[Reg_Unit.scala 18:12]
    io.rs2 <= register[io.rs2_addr] @[Reg_Unit.scala 19:12]
    node _T = eq(io.rd_addr, UInt<1>("h00")) @[Reg_Unit.scala 20:21]
    when _T : @[Reg_Unit.scala 20:36]
      register[io.rd_addr] <= asSInt(UInt<1>("h00")) @[Reg_Unit.scala 21:30]
      skip @[Reg_Unit.scala 20:36]
    else : @[Reg_Unit.scala 22:16]
      register[io.rd_addr] <= io.writeData @[Reg_Unit.scala 23:30]
      skip @[Reg_Unit.scala 22:16]
    
  module branchControl : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_A : SInt<32>, flip in_B : SInt<32>, flip br_func3 : UInt<3>, branch_out : UInt<1>}
    
    io.branch_out <= UInt<1>("h00") @[branchControl.scala 20:19]
    node _T = eq(UInt<3>("h00"), io.br_func3) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = eq(io.in_A, io.in_B) @[branchControl.scala 23:27]
      when _T_1 : @[branchControl.scala 23:39]
        io.branch_out <= UInt<1>("h01") @[branchControl.scala 24:31]
        skip @[branchControl.scala 23:39]
      else : @[branchControl.scala 25:24]
        io.branch_out <= UInt<1>("h00") @[branchControl.scala 26:31]
        skip @[branchControl.scala 25:24]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_2 = eq(UInt<3>("h01"), io.br_func3) @[Conditional.scala 37:30]
      when _T_2 : @[Conditional.scala 39:67]
        node _T_3 = neq(io.in_A, io.in_B) @[branchControl.scala 30:27]
        when _T_3 : @[branchControl.scala 30:39]
          io.branch_out <= UInt<1>("h01") @[branchControl.scala 31:31]
          skip @[branchControl.scala 30:39]
        else : @[branchControl.scala 32:24]
          io.branch_out <= UInt<1>("h00") @[branchControl.scala 33:31]
          skip @[branchControl.scala 32:24]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_4 = eq(UInt<3>("h04"), io.br_func3) @[Conditional.scala 37:30]
        when _T_4 : @[Conditional.scala 39:67]
          node _T_5 = lt(io.in_A, io.in_B) @[branchControl.scala 37:27]
          when _T_5 : @[branchControl.scala 37:37]
            io.branch_out <= UInt<1>("h01") @[branchControl.scala 38:31]
            skip @[branchControl.scala 37:37]
          else : @[branchControl.scala 39:24]
            io.branch_out <= UInt<1>("h00") @[branchControl.scala 40:31]
            skip @[branchControl.scala 39:24]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_6 = eq(UInt<3>("h05"), io.br_func3) @[Conditional.scala 37:30]
          when _T_6 : @[Conditional.scala 39:67]
            node _T_7 = gt(io.in_A, io.in_B) @[branchControl.scala 44:26]
            when _T_7 : @[branchControl.scala 44:36]
              io.branch_out <= UInt<1>("h01") @[branchControl.scala 45:31]
              skip @[branchControl.scala 44:36]
            else : @[branchControl.scala 46:24]
              io.branch_out <= UInt<1>("h00") @[branchControl.scala 47:31]
              skip @[branchControl.scala 46:24]
            skip @[Conditional.scala 39:67]
    
  module jalr : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1 : UInt<32>, flip imm : UInt<32>, pcVal : UInt<32>}
    
    node _sum_T = add(io.rs1, io.imm) @[jalr.scala 12:31]
    node _sum_T_1 = tail(_sum_T, 1) @[jalr.scala 12:31]
    wire sum : UInt
    sum <= _sum_T_1
    node _io_pcVal_T = and(sum, UInt<32>("h0fffffffe")) @[jalr.scala 13:21]
    io.pcVal <= _io_pcVal_T @[jalr.scala 13:14]
    
  module pipelining_top : 
    input clock : Clock
    input reset : UInt<1>
    output io : {out : UInt<32>}
    
    io.out <= UInt<1>("h00") @[Pipe_Top_File.scala 10:12]
    inst pC_mod of pC @[Pipe_Top_File.scala 13:24]
    pC_mod.clock <= clock
    pC_mod.reset <= reset
    inst instrMem_mod of instrMem @[Pipe_Top_File.scala 15:30]
    instrMem_mod.clock <= clock
    instrMem_mod.reset <= reset
    inst frwdunit_mod of frwdUnit @[Pipe_Top_File.scala 17:30]
    frwdunit_mod.clock <= clock
    frwdunit_mod.reset <= reset
    inst branch_frwd_mod of decode_frwd @[Pipe_Top_File.scala 19:33]
    branch_frwd_mod.clock <= clock
    branch_frwd_mod.reset <= reset
    inst strc_detect_mod of structuralDetector @[Pipe_Top_File.scala 21:33]
    strc_detect_mod.clock <= clock
    strc_detect_mod.reset <= reset
    inst hazardDetection_mod of hazardDetection @[Pipe_Top_File.scala 23:37]
    hazardDetection_mod.clock <= clock
    hazardDetection_mod.reset <= reset
    inst if_id_mod of if_id @[Pipe_Top_File.scala 25:27]
    if_id_mod.clock <= clock
    if_id_mod.reset <= reset
    inst id_ex_mod of id_ex @[Pipe_Top_File.scala 27:27]
    id_ex_mod.clock <= clock
    id_ex_mod.reset <= reset
    inst ex_mem_mod of ex_mem @[Pipe_Top_File.scala 29:28]
    ex_mem_mod.clock <= clock
    ex_mem_mod.reset <= reset
    inst mem_wr_mod of mem_wr @[Pipe_Top_File.scala 31:28]
    mem_wr_mod.clock <= clock
    mem_wr_mod.reset <= reset
    inst dataMem_mod of dataMemory @[Pipe_Top_File.scala 33:29]
    dataMem_mod.clock <= clock
    dataMem_mod.reset <= reset
    inst control_mod of control @[Pipe_Top_File.scala 35:29]
    control_mod.clock <= clock
    control_mod.reset <= reset
    inst immdGen_mod of immdValGen @[Pipe_Top_File.scala 37:29]
    immdGen_mod.clock <= clock
    immdGen_mod.reset <= reset
    inst aluControl_mod of aluControl @[Pipe_Top_File.scala 39:32]
    aluControl_mod.clock <= clock
    aluControl_mod.reset <= reset
    inst alu_mod of ALU @[Pipe_Top_File.scala 41:25]
    alu_mod.clock <= clock
    alu_mod.reset <= reset
    inst regFile_mod of regFile @[Pipe_Top_File.scala 43:29]
    regFile_mod.clock <= clock
    regFile_mod.reset <= reset
    inst brControl_mod of branchControl @[Pipe_Top_File.scala 45:31]
    brControl_mod.clock <= clock
    brControl_mod.reset <= reset
    inst jalr_mod of jalr @[Pipe_Top_File.scala 47:26]
    jalr_mod.clock <= clock
    jalr_mod.reset <= reset
    pC_mod.io.in <= pC_mod.io.pc4 @[Pipe_Top_File.scala 51:18]
    node _instrMem_mod_io_addr_T = bits(pC_mod.io.out, 21, 2) @[Pipe_Top_File.scala 52:42]
    instrMem_mod.io.addr <= _instrMem_mod_io_addr_T @[Pipe_Top_File.scala 52:26]
    if_id_mod.io.in_pc <= pC_mod.io.out @[Pipe_Top_File.scala 55:24]
    if_id_mod.io.in_pc4 <= pC_mod.io.pc4 @[Pipe_Top_File.scala 56:25]
    if_id_mod.io.in_inst <= instrMem_mod.io.instr @[Pipe_Top_File.scala 57:26]
    node _control_mod_io_op_code_T = bits(if_id_mod.io.inst_out, 6, 0) @[Pipe_Top_File.scala 59:52]
    control_mod.io.op_code <= _control_mod_io_op_code_T @[Pipe_Top_File.scala 59:28]
    immdGen_mod.io.instr <= if_id_mod.io.inst_out @[Pipe_Top_File.scala 62:26]
    immdGen_mod.io.pc <= if_id_mod.io.pc_out @[Pipe_Top_File.scala 63:23]
    node _imm_mux_T = eq(UInt<1>("h01"), control_mod.io.extend_Sel) @[Mux.scala 80:60]
    node _imm_mux_T_1 = mux(_imm_mux_T, immdGen_mod.io.s_imm, immdGen_mod.io.i_imm) @[Mux.scala 80:57]
    node _imm_mux_T_2 = eq(UInt<2>("h02"), control_mod.io.extend_Sel) @[Mux.scala 80:60]
    node _imm_mux_T_3 = mux(_imm_mux_T_2, immdGen_mod.io.u_imm, _imm_mux_T_1) @[Mux.scala 80:57]
    node _imm_mux_T_4 = eq(UInt<2>("h03"), control_mod.io.extend_Sel) @[Mux.scala 80:60]
    node imm_mux = mux(_imm_mux_T_4, asSInt(UInt<1>("h00")), _imm_mux_T_3) @[Mux.scala 80:57]
    node _regFile_mod_io_rs1_addr_T = bits(if_id_mod.io.inst_out, 19, 15) @[Pipe_Top_File.scala 72:53]
    regFile_mod.io.rs1_addr <= _regFile_mod_io_rs1_addr_T @[Pipe_Top_File.scala 72:29]
    node _regFile_mod_io_rs2_addr_T = bits(if_id_mod.io.inst_out, 24, 20) @[Pipe_Top_File.scala 73:53]
    regFile_mod.io.rs2_addr <= _regFile_mod_io_rs2_addr_T @[Pipe_Top_File.scala 73:29]
    regFile_mod.io.rd_addr <= mem_wr_mod.io.Rdaddr_out @[Pipe_Top_File.scala 74:28]
    regFile_mod.io.regWrite <= control_mod.io.regWrite @[Pipe_Top_File.scala 75:29]
    node _readData1Mux_T = eq(UInt<1>("h01"), control_mod.io.operand_A) @[Mux.scala 80:60]
    node _readData1Mux_T_1 = mux(_readData1Mux_T, if_id_mod.io.pc4_out, regFile_mod.io.rs1) @[Mux.scala 80:57]
    node _readData1Mux_T_2 = eq(UInt<2>("h02"), control_mod.io.operand_A) @[Mux.scala 80:60]
    node _readData1Mux_T_3 = mux(_readData1Mux_T_2, if_id_mod.io.pc_out, _readData1Mux_T_1) @[Mux.scala 80:57]
    node _readData1Mux_T_4 = eq(UInt<2>("h03"), control_mod.io.operand_A) @[Mux.scala 80:60]
    node readData1Mux = mux(_readData1Mux_T_4, regFile_mod.io.rs1, _readData1Mux_T_3) @[Mux.scala 80:57]
    node _readData2Mux_T = bits(control_mod.io.operand_B, 0, 0) @[Pipe_Top_File.scala 83:59]
    node readData2Mux = mux(_readData2Mux_T, imm_mux, regFile_mod.io.rs2) @[Pipe_Top_File.scala 83:27]
    node _strc_detect_mod_io_rs1Addr_T = bits(if_id_mod.io.inst_out, 19, 15) @[Pipe_Top_File.scala 86:56]
    strc_detect_mod.io.rs1Addr <= _strc_detect_mod_io_rs1Addr_T @[Pipe_Top_File.scala 86:32]
    node _strc_detect_mod_io_rs2Addr_T = bits(if_id_mod.io.inst_out, 24, 20) @[Pipe_Top_File.scala 87:56]
    strc_detect_mod.io.rs2Addr <= _strc_detect_mod_io_rs2Addr_T @[Pipe_Top_File.scala 87:32]
    strc_detect_mod.io.mem_wb_rdAddr <= mem_wr_mod.io.Rdaddr_out @[Pipe_Top_File.scala 88:38]
    strc_detect_mod.io.mem_wb_regWr <= mem_wr_mod.io.c_regWrite_out @[Pipe_Top_File.scala 89:37]
    node _strc_fA_mux_T = bits(strc_detect_mod.io.frwd_A, 0, 0) @[Pipe_Top_File.scala 91:59]
    node strc_fA_mux = mux(_strc_fA_mux_T, mem_wr_mod.io.aluOut_out, readData1Mux) @[Pipe_Top_File.scala 91:26]
    id_ex_mod.io.in_rs1 <= strc_fA_mux @[Pipe_Top_File.scala 92:25]
    node _strc_fB_mux_T = bits(strc_detect_mod.io.frwd_B, 0, 0) @[Pipe_Top_File.scala 95:59]
    node strc_fB_mux = mux(_strc_fB_mux_T, mem_wr_mod.io.aluOut_out, readData2Mux) @[Pipe_Top_File.scala 95:26]
    id_ex_mod.io.in_rs2 <= strc_fB_mux @[Pipe_Top_File.scala 96:25]
    aluControl_mod.io.alu_Operation <= control_mod.io.alu_Operation @[Pipe_Top_File.scala 101:37]
    aluControl_mod.io.func3 <= id_ex_mod.io.func3_out @[Pipe_Top_File.scala 104:29]
    aluControl_mod.io.func7 <= id_ex_mod.io.func7_out @[Pipe_Top_File.scala 105:29]
    node _brControl_mod_io_br_func3_T = bits(if_id_mod.io.inst_out, 14, 12) @[Pipe_Top_File.scala 109:55]
    brControl_mod.io.br_func3 <= _brControl_mod_io_br_func3_T @[Pipe_Top_File.scala 109:31]
    id_ex_mod.io.in_pc <= if_id_mod.io.pc_out @[Pipe_Top_File.scala 112:24]
    id_ex_mod.io.in_pc4 <= if_id_mod.io.pc4_out @[Pipe_Top_File.scala 113:25]
    node _id_ex_mod_io_in_func3_T = bits(if_id_mod.io.inst_out, 14, 12) @[Pipe_Top_File.scala 117:51]
    id_ex_mod.io.in_func3 <= _id_ex_mod_io_in_func3_T @[Pipe_Top_File.scala 117:27]
    node _id_ex_mod_io_in_func7_T = bits(if_id_mod.io.inst_out, 31, 25) @[Pipe_Top_File.scala 118:51]
    id_ex_mod.io.in_func7 <= _id_ex_mod_io_in_func7_T @[Pipe_Top_File.scala 118:27]
    id_ex_mod.io.in_imm <= imm_mux @[Pipe_Top_File.scala 119:25]
    node _id_ex_mod_io_in_Rdaddr_T = bits(if_id_mod.io.inst_out, 11, 7) @[Pipe_Top_File.scala 120:52]
    id_ex_mod.io.in_Rdaddr <= _id_ex_mod_io_in_Rdaddr_T @[Pipe_Top_File.scala 120:28]
    id_ex_mod.io.in_rs1Addr <= regFile_mod.io.rs1_addr @[Pipe_Top_File.scala 121:29]
    id_ex_mod.io.in_rs2Addr <= regFile_mod.io.rs2_addr @[Pipe_Top_File.scala 122:29]
    id_ex_mod.io.in_aluCout <= aluControl_mod.io.out @[Pipe_Top_File.scala 123:29]
    alu_mod.io.alu_Op <= id_ex_mod.io.aluCout_out @[Pipe_Top_File.scala 137:23]
    ex_mem_mod.io.in_c_memwr <= id_ex_mod.io.c_memWrite_out @[Pipe_Top_File.scala 143:30]
    ex_mem_mod.io.in_c_memrd <= id_ex_mod.io.c_memRead_out @[Pipe_Top_File.scala 144:30]
    ex_mem_mod.io.in_c_memtoreg <= id_ex_mod.io.c_memToReg_out @[Pipe_Top_File.scala 145:33]
    ex_mem_mod.io.in_ALUout <= alu_mod.io.out @[Pipe_Top_File.scala 146:29]
    ex_mem_mod.io.in_Rdaddr <= id_ex_mod.io.rdaddr_out @[Pipe_Top_File.scala 147:29]
    ex_mem_mod.io.in_Rs2addr <= id_ex_mod.io.rs2Addr_out @[Pipe_Top_File.scala 148:30]
    ex_mem_mod.io.in_c_regWrite <= id_ex_mod.io.c_regWrite_out @[Pipe_Top_File.scala 149:33]
    ex_mem_mod.io.in_rs2 <= readData2Mux @[Pipe_Top_File.scala 150:26]
    node _dataMem_mod_io_rdAddr_T = bits(ex_mem_mod.io.ALUout_out, 11, 2) @[Pipe_Top_File.scala 153:54]
    dataMem_mod.io.rdAddr <= _dataMem_mod_io_rdAddr_T @[Pipe_Top_File.scala 153:27]
    dataMem_mod.io.dataIn <= ex_mem_mod.io.rs2_out @[Pipe_Top_File.scala 154:27]
    dataMem_mod.io.writeData <= ex_mem_mod.io.memwr_out @[Pipe_Top_File.scala 155:30]
    dataMem_mod.io.readData <= ex_mem_mod.io.memrd_out @[Pipe_Top_File.scala 156:29]
    mem_wr_mod.io.in_c_memtoreg <= ex_mem_mod.io.memtoreg_out @[Pipe_Top_File.scala 159:33]
    mem_wr_mod.io.in_dataOut <= dataMem_mod.io.dataOut @[Pipe_Top_File.scala 160:30]
    mem_wr_mod.io.in_aluOut <= ex_mem_mod.io.ALUout_out @[Pipe_Top_File.scala 161:29]
    mem_wr_mod.io.in_Rdaddr <= ex_mem_mod.io.rdaddr_out @[Pipe_Top_File.scala 162:29]
    mem_wr_mod.io.in_c_memRead <= ex_mem_mod.io.memrd_out @[Pipe_Top_File.scala 163:32]
    mem_wr_mod.io.in_c_regWrite <= ex_mem_mod.io.reg_write_out @[Pipe_Top_File.scala 164:33]
    node _dataMem_mux_T = bits(mem_wr_mod.io.c_memtoreg_out, 0, 0) @[Pipe_Top_File.scala 166:62]
    node dataMem_mux = mux(_dataMem_mux_T, mem_wr_mod.io.dataOut_out, mem_wr_mod.io.aluOut_out) @[Pipe_Top_File.scala 166:26]
    regFile_mod.io.writeData <= dataMem_mux @[Pipe_Top_File.scala 168:30]
    node _jalr_mod_io_rs1_T = asUInt(readData1Mux) @[Pipe_Top_File.scala 171:43]
    jalr_mod.io.rs1 <= _jalr_mod_io_rs1_T @[Pipe_Top_File.scala 171:21]
    node _jalr_mod_io_imm_T = asUInt(imm_mux) @[Pipe_Top_File.scala 172:38]
    jalr_mod.io.imm <= _jalr_mod_io_imm_T @[Pipe_Top_File.scala 172:21]
    frwdunit_mod.io.exMem_reg_write <= ex_mem_mod.io.reg_write_out @[Pipe_Top_File.scala 187:37]
    frwdunit_mod.io.memWb_reg_write <= mem_wr_mod.io.c_regWrite_out @[Pipe_Top_File.scala 188:37]
    frwdunit_mod.io.ex_mem_rdAddr <= ex_mem_mod.io.rdaddr_out @[Pipe_Top_File.scala 189:35]
    frwdunit_mod.io.mem_wb_rdAddr <= mem_wr_mod.io.Rdaddr_out @[Pipe_Top_File.scala 190:35]
    frwdunit_mod.io.id_ex_rs1Addr <= id_ex_mod.io.rs1Addr_out @[Pipe_Top_File.scala 191:35]
    frwdunit_mod.io.id_ex_rs2Addr <= id_ex_mod.io.rs2Addr_out @[Pipe_Top_File.scala 192:35]
    node _T = eq(id_ex_mod.io.c_operand_A_out, UInt<2>("h02")) @[Pipe_Top_File.scala 195:39]
    when _T : @[Pipe_Top_File.scala 195:51]
      alu_mod.io.in_A <= id_ex_mod.io.pc4_out @[Pipe_Top_File.scala 196:25]
      skip @[Pipe_Top_File.scala 195:51]
    else : @[Pipe_Top_File.scala 197:16]
      node _T_1 = eq(frwdunit_mod.io.frwdA, UInt<1>("h00")) @[Pipe_Top_File.scala 198:36]
      when _T_1 : @[Pipe_Top_File.scala 198:48]
        alu_mod.io.in_A <= id_ex_mod.io.rs1_out @[Pipe_Top_File.scala 199:29]
        skip @[Pipe_Top_File.scala 198:48]
      else : @[Pipe_Top_File.scala 200:54]
        node _T_2 = eq(frwdunit_mod.io.frwdA, UInt<1>("h01")) @[Pipe_Top_File.scala 200:42]
        when _T_2 : @[Pipe_Top_File.scala 200:54]
          alu_mod.io.in_A <= ex_mem_mod.io.ALUout_out @[Pipe_Top_File.scala 201:29]
          skip @[Pipe_Top_File.scala 200:54]
        else : @[Pipe_Top_File.scala 202:54]
          node _T_3 = eq(frwdunit_mod.io.frwdA, UInt<2>("h02")) @[Pipe_Top_File.scala 202:42]
          when _T_3 : @[Pipe_Top_File.scala 202:54]
            alu_mod.io.in_A <= regFile_mod.io.writeData @[Pipe_Top_File.scala 203:29]
            skip @[Pipe_Top_File.scala 202:54]
          else : @[Pipe_Top_File.scala 204:20]
            alu_mod.io.in_A <= id_ex_mod.io.rs1_out @[Pipe_Top_File.scala 205:29]
            skip @[Pipe_Top_File.scala 204:20]
      skip @[Pipe_Top_File.scala 197:16]
    node _T_4 = eq(id_ex_mod.io.c_operand_B_out, UInt<1>("h01")) @[Pipe_Top_File.scala 209:39]
    when _T_4 : @[Pipe_Top_File.scala 209:50]
      alu_mod.io.in_B <= id_ex_mod.io.imm_out @[Pipe_Top_File.scala 210:25]
      node _T_5 = eq(frwdunit_mod.io.frwdB, UInt<1>("h00")) @[Pipe_Top_File.scala 211:36]
      when _T_5 : @[Pipe_Top_File.scala 211:48]
        ex_mem_mod.io.in_rs2 <= id_ex_mod.io.rs2_out @[Pipe_Top_File.scala 212:34]
        skip @[Pipe_Top_File.scala 211:48]
      else : @[Pipe_Top_File.scala 213:55]
        node _T_6 = eq(frwdunit_mod.io.frwdB, UInt<1>("h01")) @[Pipe_Top_File.scala 213:42]
        when _T_6 : @[Pipe_Top_File.scala 213:55]
          ex_mem_mod.io.in_rs2 <= ex_mem_mod.io.ALUout_out @[Pipe_Top_File.scala 214:34]
          skip @[Pipe_Top_File.scala 213:55]
        else : @[Pipe_Top_File.scala 215:55]
          node _T_7 = eq(frwdunit_mod.io.frwdB, UInt<2>("h02")) @[Pipe_Top_File.scala 215:42]
          when _T_7 : @[Pipe_Top_File.scala 215:55]
            ex_mem_mod.io.in_rs2 <= regFile_mod.io.writeData @[Pipe_Top_File.scala 216:34]
            skip @[Pipe_Top_File.scala 215:55]
          else : @[Pipe_Top_File.scala 217:20]
            ex_mem_mod.io.in_rs2 <= id_ex_mod.io.rs2_out @[Pipe_Top_File.scala 218:34]
            skip @[Pipe_Top_File.scala 217:20]
      skip @[Pipe_Top_File.scala 209:50]
    else : @[Pipe_Top_File.scala 220:16]
      node _T_8 = eq(frwdunit_mod.io.frwdB, UInt<1>("h00")) @[Pipe_Top_File.scala 221:36]
      when _T_8 : @[Pipe_Top_File.scala 221:48]
        alu_mod.io.in_B <= id_ex_mod.io.rs2_out @[Pipe_Top_File.scala 222:25]
        ex_mem_mod.io.in_rs2 <= id_ex_mod.io.rs2_out @[Pipe_Top_File.scala 223:30]
        skip @[Pipe_Top_File.scala 221:48]
      else : @[Pipe_Top_File.scala 224:50]
        node _T_9 = eq(frwdunit_mod.io.frwdB, UInt<1>("h01")) @[Pipe_Top_File.scala 224:38]
        when _T_9 : @[Pipe_Top_File.scala 224:50]
          alu_mod.io.in_B <= ex_mem_mod.io.ALUout_out @[Pipe_Top_File.scala 225:25]
          ex_mem_mod.io.in_rs2 <= ex_mem_mod.io.ALUout_out @[Pipe_Top_File.scala 226:30]
          skip @[Pipe_Top_File.scala 224:50]
        else : @[Pipe_Top_File.scala 227:50]
          node _T_10 = eq(frwdunit_mod.io.frwdB, UInt<2>("h02")) @[Pipe_Top_File.scala 227:38]
          when _T_10 : @[Pipe_Top_File.scala 227:50]
            alu_mod.io.in_B <= regFile_mod.io.writeData @[Pipe_Top_File.scala 228:25]
            ex_mem_mod.io.in_rs2 <= regFile_mod.io.writeData @[Pipe_Top_File.scala 229:30]
            skip @[Pipe_Top_File.scala 227:50]
          else : @[Pipe_Top_File.scala 230:16]
            alu_mod.io.in_B <= id_ex_mod.io.rs2_out @[Pipe_Top_File.scala 231:25]
            ex_mem_mod.io.in_rs2 <= id_ex_mod.io.rs2_out @[Pipe_Top_File.scala 232:30]
            skip @[Pipe_Top_File.scala 230:16]
      skip @[Pipe_Top_File.scala 220:16]
    hazardDetection_mod.io.id_ex_memRead <= id_ex_mod.io.c_memRead_out @[Pipe_Top_File.scala 238:42]
    hazardDetection_mod.io.id_ex_rdAddr <= id_ex_mod.io.rdaddr_out @[Pipe_Top_File.scala 239:41]
    hazardDetection_mod.io.if_id_in_inst <= if_id_mod.io.inst_out @[Pipe_Top_File.scala 240:42]
    hazardDetection_mod.io.in_pc <= if_id_mod.io.pc_out @[Pipe_Top_File.scala 241:34]
    hazardDetection_mod.io.in_pc4 <= if_id_mod.io.pc4_out @[Pipe_Top_File.scala 242:35]
    node _T_11 = eq(hazardDetection_mod.io.inst_frwd, UInt<1>("h01")) @[Pipe_Top_File.scala 244:43]
    when _T_11 : @[Pipe_Top_File.scala 244:55]
      if_id_mod.io.in_inst <= hazardDetection_mod.io.if_id_inst_out @[Pipe_Top_File.scala 245:30]
      if_id_mod.io.in_pc <= hazardDetection_mod.io.pc_out @[Pipe_Top_File.scala 246:28]
      skip @[Pipe_Top_File.scala 244:55]
    else : @[Pipe_Top_File.scala 247:16]
      if_id_mod.io.in_inst <= instrMem_mod.io.instr @[Pipe_Top_File.scala 248:30]
      skip @[Pipe_Top_File.scala 247:16]
    node _T_12 = eq(hazardDetection_mod.io.pc_frwd, UInt<1>("h01")) @[Pipe_Top_File.scala 251:41]
    when _T_12 : @[Pipe_Top_File.scala 251:53]
      pC_mod.io.in <= hazardDetection_mod.io.pc_out @[Pipe_Top_File.scala 252:22]
      skip @[Pipe_Top_File.scala 251:53]
    else : @[Pipe_Top_File.scala 253:16]
      node _T_13 = eq(control_mod.io.nextPc_Sel, UInt<1>("h01")) @[Pipe_Top_File.scala 254:36]
      when _T_13 : @[Pipe_Top_File.scala 254:49]
        node _T_14 = eq(brControl_mod.io.branch_out, UInt<1>("h01")) @[Pipe_Top_File.scala 255:42]
        node _T_15 = eq(control_mod.io.branch, UInt<1>("h01")) @[Pipe_Top_File.scala 255:75]
        node _T_16 = and(_T_14, _T_15) @[Pipe_Top_File.scala 255:50]
        when _T_16 : @[Pipe_Top_File.scala 255:84]
          pC_mod.io.in <= immdGen_mod.io.sb_imm @[Pipe_Top_File.scala 256:26]
          if_id_mod.io.in_pc <= asSInt(UInt<1>("h00")) @[Pipe_Top_File.scala 257:32]
          if_id_mod.io.in_pc <= asSInt(UInt<1>("h00")) @[Pipe_Top_File.scala 258:32]
          if_id_mod.io.in_inst <= UInt<1>("h00") @[Pipe_Top_File.scala 259:34]
          skip @[Pipe_Top_File.scala 255:84]
        else : @[Pipe_Top_File.scala 260:20]
          pC_mod.io.in <= pC_mod.io.pc4 @[Pipe_Top_File.scala 261:26]
          skip @[Pipe_Top_File.scala 260:20]
        skip @[Pipe_Top_File.scala 254:49]
      else : @[Pipe_Top_File.scala 263:55]
        node _T_17 = eq(control_mod.io.nextPc_Sel, UInt<2>("h02")) @[Pipe_Top_File.scala 263:42]
        when _T_17 : @[Pipe_Top_File.scala 263:55]
          pC_mod.io.in <= immdGen_mod.io.uj_imm @[Pipe_Top_File.scala 264:20]
          if_id_mod.io.in_pc4 <= asSInt(UInt<1>("h00")) @[Pipe_Top_File.scala 265:27]
          if_id_mod.io.in_inst <= UInt<1>("h00") @[Pipe_Top_File.scala 266:28]
          skip @[Pipe_Top_File.scala 263:55]
        else : @[Pipe_Top_File.scala 267:16]
          pC_mod.io.in <= pC_mod.io.pc4 @[Pipe_Top_File.scala 268:20]
          skip @[Pipe_Top_File.scala 267:16]
      skip @[Pipe_Top_File.scala 253:16]
    node _T_18 = eq(hazardDetection_mod.io.ctrl_frwd, UInt<1>("h01")) @[Pipe_Top_File.scala 271:43]
    when _T_18 : @[Pipe_Top_File.scala 271:55]
      id_ex_mod.io.in_c_memWrite <= UInt<1>("h00") @[Pipe_Top_File.scala 272:36]
      id_ex_mod.io.in_c_memRead <= UInt<1>("h00") @[Pipe_Top_File.scala 273:35]
      id_ex_mod.io.in_c_branch <= UInt<1>("h00") @[Pipe_Top_File.scala 274:34]
      id_ex_mod.io.in_c_regWrite <= UInt<1>("h00") @[Pipe_Top_File.scala 275:36]
      id_ex_mod.io.in_c_memToReg <= UInt<1>("h00") @[Pipe_Top_File.scala 276:36]
      id_ex_mod.io.in_c_alu_Operation <= UInt<1>("h00") @[Pipe_Top_File.scala 277:41]
      id_ex_mod.io.in_c_operand_A <= UInt<1>("h00") @[Pipe_Top_File.scala 278:37]
      id_ex_mod.io.in_c_operand_B <= UInt<1>("h00") @[Pipe_Top_File.scala 279:37]
      id_ex_mod.io.in_c_nextPc <= UInt<1>("h00") @[Pipe_Top_File.scala 280:34]
      skip @[Pipe_Top_File.scala 271:55]
    else : @[Pipe_Top_File.scala 281:16]
      id_ex_mod.io.in_c_memWrite <= control_mod.io.memWrite @[Pipe_Top_File.scala 282:36]
      id_ex_mod.io.in_c_memRead <= control_mod.io.memRead @[Pipe_Top_File.scala 283:35]
      id_ex_mod.io.in_c_branch <= control_mod.io.branch @[Pipe_Top_File.scala 284:34]
      id_ex_mod.io.in_c_regWrite <= control_mod.io.regWrite @[Pipe_Top_File.scala 285:36]
      id_ex_mod.io.in_c_memToReg <= control_mod.io.memToReg @[Pipe_Top_File.scala 286:36]
      id_ex_mod.io.in_c_alu_Operation <= control_mod.io.alu_Operation @[Pipe_Top_File.scala 287:41]
      id_ex_mod.io.in_c_operand_A <= control_mod.io.operand_A @[Pipe_Top_File.scala 288:37]
      id_ex_mod.io.in_c_operand_B <= control_mod.io.operand_B @[Pipe_Top_File.scala 289:37]
      id_ex_mod.io.in_c_nextPc <= control_mod.io.nextPc_Sel @[Pipe_Top_File.scala 290:34]
      skip @[Pipe_Top_File.scala 281:16]
    branch_frwd_mod.io.id_ex_rdAddr <= id_ex_mod.io.rdaddr_out @[Pipe_Top_File.scala 294:37]
    branch_frwd_mod.io.id_ex_memRead <= id_ex_mod.io.c_memRead_out @[Pipe_Top_File.scala 295:38]
    branch_frwd_mod.io.ex_mem_rdAddr <= ex_mem_mod.io.rdaddr_out @[Pipe_Top_File.scala 296:38]
    branch_frwd_mod.io.mem_wr_rdAddr <= mem_wr_mod.io.Rdaddr_out @[Pipe_Top_File.scala 297:38]
    branch_frwd_mod.io.ex_mem_memRead <= ex_mem_mod.io.memrd_out @[Pipe_Top_File.scala 298:39]
    branch_frwd_mod.io.mem_wr_memRead <= mem_wr_mod.io.c_memRead_out @[Pipe_Top_File.scala 299:39]
    node _branch_frwd_mod_io_rs1Addr_T = bits(if_id_mod.io.inst_out, 19, 15) @[Pipe_Top_File.scala 300:56]
    branch_frwd_mod.io.rs1Addr <= _branch_frwd_mod_io_rs1Addr_T @[Pipe_Top_File.scala 300:32]
    node _branch_frwd_mod_io_rs2Addr_T = bits(if_id_mod.io.inst_out, 24, 20) @[Pipe_Top_File.scala 301:56]
    branch_frwd_mod.io.rs2Addr <= _branch_frwd_mod_io_rs2Addr_T @[Pipe_Top_File.scala 301:32]
    branch_frwd_mod.io.c_branch <= control_mod.io.branch @[Pipe_Top_File.scala 302:33]
    node _T_19 = eq(branch_frwd_mod.io.frwd_A, UInt<1>("h00")) @[Pipe_Top_File.scala 305:36]
    when _T_19 : @[Pipe_Top_File.scala 305:50]
      brControl_mod.io.in_A <= regFile_mod.io.rs1 @[Pipe_Top_File.scala 306:31]
      node _jalr_mod_io_rs1_T_1 = asUInt(regFile_mod.io.rs1) @[Pipe_Top_File.scala 307:53]
      jalr_mod.io.rs1 <= _jalr_mod_io_rs1_T_1 @[Pipe_Top_File.scala 307:25]
      skip @[Pipe_Top_File.scala 305:50]
    else : @[Pipe_Top_File.scala 308:56]
      node _T_20 = eq(branch_frwd_mod.io.frwd_A, UInt<1>("h01")) @[Pipe_Top_File.scala 308:42]
      when _T_20 : @[Pipe_Top_File.scala 308:56]
        brControl_mod.io.in_A <= alu_mod.io.out @[Pipe_Top_File.scala 309:31]
        node _jalr_mod_io_rs1_T_2 = asUInt(regFile_mod.io.rs1) @[Pipe_Top_File.scala 310:53]
        jalr_mod.io.rs1 <= _jalr_mod_io_rs1_T_2 @[Pipe_Top_File.scala 310:25]
        skip @[Pipe_Top_File.scala 308:56]
      else : @[Pipe_Top_File.scala 311:56]
        node _T_21 = eq(branch_frwd_mod.io.frwd_A, UInt<2>("h02")) @[Pipe_Top_File.scala 311:42]
        when _T_21 : @[Pipe_Top_File.scala 311:56]
          brControl_mod.io.in_A <= ex_mem_mod.io.ALUout_out @[Pipe_Top_File.scala 312:31]
          node _jalr_mod_io_rs1_T_3 = asUInt(regFile_mod.io.rs1) @[Pipe_Top_File.scala 313:53]
          jalr_mod.io.rs1 <= _jalr_mod_io_rs1_T_3 @[Pipe_Top_File.scala 313:25]
          skip @[Pipe_Top_File.scala 311:56]
        else : @[Pipe_Top_File.scala 314:56]
          node _T_22 = eq(branch_frwd_mod.io.frwd_A, UInt<2>("h03")) @[Pipe_Top_File.scala 314:42]
          when _T_22 : @[Pipe_Top_File.scala 314:56]
            brControl_mod.io.in_A <= regFile_mod.io.writeData @[Pipe_Top_File.scala 315:31]
            node _jalr_mod_io_rs1_T_4 = asUInt(regFile_mod.io.rs1) @[Pipe_Top_File.scala 316:53]
            jalr_mod.io.rs1 <= _jalr_mod_io_rs1_T_4 @[Pipe_Top_File.scala 316:25]
            skip @[Pipe_Top_File.scala 314:56]
          else : @[Pipe_Top_File.scala 317:56]
            node _T_23 = eq(branch_frwd_mod.io.frwd_A, UInt<3>("h04")) @[Pipe_Top_File.scala 317:42]
            when _T_23 : @[Pipe_Top_File.scala 317:56]
              brControl_mod.io.in_A <= dataMem_mod.io.dataOut @[Pipe_Top_File.scala 318:31]
              node _jalr_mod_io_rs1_T_5 = asUInt(regFile_mod.io.rs1) @[Pipe_Top_File.scala 319:53]
              jalr_mod.io.rs1 <= _jalr_mod_io_rs1_T_5 @[Pipe_Top_File.scala 319:25]
              skip @[Pipe_Top_File.scala 317:56]
            else : @[Pipe_Top_File.scala 320:56]
              node _T_24 = eq(branch_frwd_mod.io.frwd_A, UInt<3>("h05")) @[Pipe_Top_File.scala 320:42]
              when _T_24 : @[Pipe_Top_File.scala 320:56]
                brControl_mod.io.in_A <= regFile_mod.io.writeData @[Pipe_Top_File.scala 321:31]
                node _jalr_mod_io_rs1_T_6 = asUInt(regFile_mod.io.rs1) @[Pipe_Top_File.scala 322:53]
                jalr_mod.io.rs1 <= _jalr_mod_io_rs1_T_6 @[Pipe_Top_File.scala 322:25]
                skip @[Pipe_Top_File.scala 320:56]
              else : @[Pipe_Top_File.scala 323:56]
                node _T_25 = eq(branch_frwd_mod.io.frwd_A, UInt<3>("h06")) @[Pipe_Top_File.scala 323:42]
                when _T_25 : @[Pipe_Top_File.scala 323:56]
                  node _jalr_mod_io_rs1_T_7 = asUInt(alu_mod.io.out) @[Pipe_Top_File.scala 324:49]
                  jalr_mod.io.rs1 <= _jalr_mod_io_rs1_T_7 @[Pipe_Top_File.scala 324:25]
                  brControl_mod.io.in_A <= regFile_mod.io.rs1 @[Pipe_Top_File.scala 325:31]
                  skip @[Pipe_Top_File.scala 323:56]
                else : @[Pipe_Top_File.scala 326:56]
                  node _T_26 = eq(branch_frwd_mod.io.frwd_A, UInt<3>("h07")) @[Pipe_Top_File.scala 326:42]
                  when _T_26 : @[Pipe_Top_File.scala 326:56]
                    node _jalr_mod_io_rs1_T_8 = asUInt(ex_mem_mod.io.ALUout_out) @[Pipe_Top_File.scala 327:59]
                    jalr_mod.io.rs1 <= _jalr_mod_io_rs1_T_8 @[Pipe_Top_File.scala 327:25]
                    brControl_mod.io.in_A <= regFile_mod.io.rs1 @[Pipe_Top_File.scala 328:31]
                    skip @[Pipe_Top_File.scala 326:56]
                  else : @[Pipe_Top_File.scala 329:56]
                    node _T_27 = eq(branch_frwd_mod.io.frwd_A, UInt<4>("h08")) @[Pipe_Top_File.scala 329:42]
                    when _T_27 : @[Pipe_Top_File.scala 329:56]
                      node _jalr_mod_io_rs1_T_9 = asUInt(regFile_mod.io.writeData) @[Pipe_Top_File.scala 330:59]
                      jalr_mod.io.rs1 <= _jalr_mod_io_rs1_T_9 @[Pipe_Top_File.scala 330:25]
                      brControl_mod.io.in_A <= regFile_mod.io.rs1 @[Pipe_Top_File.scala 331:31]
                      skip @[Pipe_Top_File.scala 329:56]
                    else : @[Pipe_Top_File.scala 332:56]
                      node _T_28 = eq(branch_frwd_mod.io.frwd_A, UInt<4>("h09")) @[Pipe_Top_File.scala 332:42]
                      when _T_28 : @[Pipe_Top_File.scala 332:56]
                        node _jalr_mod_io_rs1_T_10 = asUInt(dataMem_mod.io.dataOut) @[Pipe_Top_File.scala 333:57]
                        jalr_mod.io.rs1 <= _jalr_mod_io_rs1_T_10 @[Pipe_Top_File.scala 333:25]
                        brControl_mod.io.in_A <= regFile_mod.io.rs1 @[Pipe_Top_File.scala 334:31]
                        skip @[Pipe_Top_File.scala 332:56]
                      else : @[Pipe_Top_File.scala 335:56]
                        node _T_29 = eq(branch_frwd_mod.io.frwd_A, UInt<4>("h0a")) @[Pipe_Top_File.scala 335:42]
                        when _T_29 : @[Pipe_Top_File.scala 335:56]
                          node _jalr_mod_io_rs1_T_11 = asUInt(regFile_mod.io.writeData) @[Pipe_Top_File.scala 336:59]
                          jalr_mod.io.rs1 <= _jalr_mod_io_rs1_T_11 @[Pipe_Top_File.scala 336:25]
                          brControl_mod.io.in_A <= regFile_mod.io.rs1 @[Pipe_Top_File.scala 337:31]
                          skip @[Pipe_Top_File.scala 335:56]
                        else : @[Pipe_Top_File.scala 338:16]
                          brControl_mod.io.in_A <= regFile_mod.io.rs1 @[Pipe_Top_File.scala 339:31]
                          node _jalr_mod_io_rs1_T_12 = asUInt(regFile_mod.io.rs1) @[Pipe_Top_File.scala 340:53]
                          jalr_mod.io.rs1 <= _jalr_mod_io_rs1_T_12 @[Pipe_Top_File.scala 340:25]
                          skip @[Pipe_Top_File.scala 338:16]
    node _branch_frwdB_mux_T = eq(UInt<1>("h00"), branch_frwd_mod.io.frwd_B) @[Mux.scala 80:60]
    node _branch_frwdB_mux_T_1 = mux(_branch_frwdB_mux_T, regFile_mod.io.rs2, asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _branch_frwdB_mux_T_2 = eq(UInt<1>("h01"), branch_frwd_mod.io.frwd_B) @[Mux.scala 80:60]
    node _branch_frwdB_mux_T_3 = mux(_branch_frwdB_mux_T_2, alu_mod.io.out, _branch_frwdB_mux_T_1) @[Mux.scala 80:57]
    node _branch_frwdB_mux_T_4 = eq(UInt<2>("h02"), branch_frwd_mod.io.frwd_B) @[Mux.scala 80:60]
    node _branch_frwdB_mux_T_5 = mux(_branch_frwdB_mux_T_4, ex_mem_mod.io.ALUout_out, _branch_frwdB_mux_T_3) @[Mux.scala 80:57]
    node _branch_frwdB_mux_T_6 = eq(UInt<2>("h03"), branch_frwd_mod.io.frwd_B) @[Mux.scala 80:60]
    node _branch_frwdB_mux_T_7 = mux(_branch_frwdB_mux_T_6, dataMem_mux, _branch_frwdB_mux_T_5) @[Mux.scala 80:57]
    node _branch_frwdB_mux_T_8 = eq(UInt<3>("h04"), branch_frwd_mod.io.frwd_B) @[Mux.scala 80:60]
    node _branch_frwdB_mux_T_9 = mux(_branch_frwdB_mux_T_8, dataMem_mod.io.dataOut, _branch_frwdB_mux_T_7) @[Mux.scala 80:57]
    node _branch_frwdB_mux_T_10 = eq(UInt<3>("h05"), branch_frwd_mod.io.frwd_B) @[Mux.scala 80:60]
    node branch_frwdB_mux = mux(_branch_frwdB_mux_T_10, dataMem_mux, _branch_frwdB_mux_T_9) @[Mux.scala 80:57]
    brControl_mod.io.in_B <= branch_frwdB_mux @[Pipe_Top_File.scala 351:27]
    io.out <= instrMem_mod.io.instr @[Pipe_Top_File.scala 364:12]
    
